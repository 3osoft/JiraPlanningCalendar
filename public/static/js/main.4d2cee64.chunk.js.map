{"version":3,"sources":["jira.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","axios.ts","token.js","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/dom-element-helper.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","modules/shared/drag-and-drop-utils.ts","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["JIRA_BROWSE_URL","ListDataViewer","cell","dispatch","useDispatch","state","useSelector","row","col","positionKey","JSON","stringify","cellId","id","performMultiDrag","event","item","selectedItems","find","x","value","selectAction","toggleSelection","droppableId","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","map","index","key","draggableId","draggableProps","isDragging","draggableStyle","isSelected","display","userSelect","marginTop","marginBottom","borderStyle","dragHandleProps","width","height","onClick","defaultPrevented","button","preventDefault","handleClickForMultiDrag","onKeyDown","label","marginLeft","marginRight","window","open","handleOpenIssue","cursor","placeholder","axiosInstance","Axios","create","baseURL","interceptors","request","use","config","url","parent","token","DataService","defaultQuery","startDate","moment","startOf","toDate","endDate","endOf","this","result","selected","DataViewer","query","userUrl","issuesUrl","userName","issuesQuery","issue","format","endsWith","slice","Promise","all","get","fetchDataAction","a","async","fetchDataRequested","dataService","loadData","fetchDataSuccess","console","log","fetchDataFailure","type","payload","error","multiDragItem","JiraPlanningCalendarFilter","props","getFilterItemStyle","pos","flex","alignSelf","filterHandler","Form","onSubmit","data","formProps","submitting","dirty","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","name","defaultValue","fieldProps","valid","DatePicker","Textfield","Button","appearance","isDisabled","hideElements","elements","forEach","el","visibility","JiraPlanningCalendar","useEffect","isLoading","document","querySelectorAll","body","addEventListener","getList","handleSimpleDrag","source","destination","cellPosition","parse","list","startIndex","endIndex","Array","from","splice","removed","reorder","reorderAction","sourceCellPosition","destinationCellPosition","sourceRow","sourceCol","destinationRow","destinationCol","droppableSource","droppableDestination","sourceClone","destClone","move","sourRow","sourCol","sourData","destRow","destCol","destData","handleMultiDrag","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","user","Date","active","spinner","color","styles","overlay","base","onDragStart","includes","onDragEnd","whiteSpace","Boolean","location","hostname","match","initialState","errors","rootReducer","action","Object","assign","reorderResult","sourCell","destCell","moveResult","selectedItem","singleDestinationMultiDragResult","sourceCell","destinationCell","filter","push","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d2cee64.chunk.js","sourcesContent":["export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import React from 'react';\r\nimport { Droppable, Draggable, DraggableStateSnapshot } from 'react-beautiful-dnd';\r\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { JIRA_BROWSE_URL } from '../../../jira';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectAction } from './../actions';\r\nimport { MultiDragItem } from '../model/cell/multi-drag-item';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const dispatch = useDispatch();\r\n   const state = useSelector(state => state);\r\n\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const positionKey = JSON.stringify({ row, col });\r\n   const cellId = cell.id;\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle, isSelected) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : 'white',\r\n      borderStyle: isSelected ? 'dotted' : 'none',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleOpenIssue = (item) => {\r\n      window.open(`${JIRA_BROWSE_URL}${item}`, '_blank');\r\n   }\r\n\r\n   const handleClickForMultiDrag = (event: MouseEvent, item: string) => {\r\n      if (event.defaultPrevented) {\r\n         return;\r\n      }\r\n\r\n      if (event.button !== 0) {\r\n         return;\r\n      }\r\n\r\n      event.preventDefault();\r\n\r\n      performMultiDrag(event, item);\r\n   }\r\n\r\n   const toggleSelection = (item: MultiDragItem) => {\r\n      const selectedItems: Array<MultiDragItem> = state.selectedItems;\r\n      \r\n      if (!selectedItems.find(x => x.cellId === item.cellId && x.value === item.value)) {\r\n         dispatch(selectAction(item));\r\n      }\r\n   }\r\n\r\n   const handleKeyDownForMultiDrag = (event: KeyboardEvent, snapshot: DraggableStateSnapshot) => {\r\n      /*if (event.defaultPrevented) {\r\n         return;\r\n      }\r\n\r\n      if (snapshot.isDragging) {\r\n         return;\r\n      }\r\n\r\n      // if (event.key !== 'Enter') {\r\n      //    return;\r\n      // }\r\n\r\n      event.preventDefault();\r\n\r\n      performMultiDrag(event, '');*/\r\n   }\r\n\r\n   const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | KeyboardEvent) => {\r\n      const isWindows = navigator.platform.indexOf('Win') >= 0;\r\n      return isWindows ? event.ctrlKey : event.metaKey;\r\n   }\r\n\r\n   const wasMultiSelectKeyUsed = (event: MouseEvent | KeyboardEvent) => event.shiftKey;\r\n\r\n   const performMultiDrag = (event: MouseEvent | KeyboardEvent, item: string) => {\r\n      const multiDragItem = {\r\n         cellId: cellId,\r\n         value: item\r\n      } as MultiDragItem;\r\n\r\n      toggleSelection(multiDragItem);\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={positionKey}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item, index) => (\r\n                  <Draggable\r\n                     key={`${cellId}-${item}`}\r\n                     draggableId={`${cellId}-${item}`}\r\n                     index={index}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style,\r\n                              state.selectedItems.find(x => cellId === x.cellId && item === x.item)\r\n                           )}>\r\n                           <div {...provided.dragHandleProps}\r\n                              style={getListItemIconStyle()}\r\n                              onClick={(event: MouseEvent) => handleClickForMultiDrag(event, item)}\r\n                              onKeyDown={(event: KeyboardEvent) => handleKeyDownForMultiDrag(event, snapshot)}\r\n                           >\r\n                              <DragHandlerIcon label='drag-handle' />\r\n                           </div>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\nimport { Cell } from \"./model/cell/cell\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    // const data = await this.getData(query);\r\n    // const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    // const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n    // const result = new CalendarDataCreator(users, issues, query.startDate, query.endDate).calendarData;\r\n    //console.log(result)\r\n    const result = [\r\n      [\r\n        {\r\n          id: '1',\r\n          row: 0,\r\n          col: 0,\r\n          value: [\"Raspberry\", \"Apple\"],\r\n          selected: [],\r\n          DataViewer: ListDataViewer\r\n        } as Cell,\r\n        {\r\n          id: '2',\r\n          row: 0,\r\n          col: 1,\r\n          value: [\"Paprika\", \"Onion\"],\r\n          selected: [],\r\n          DataViewer: ListDataViewer\r\n        } as Cell\r\n      ],\r\n      [\r\n        {\r\n          id: '3',\r\n          row: 1,\r\n          col: 0,\r\n          value: [\"Cola\", \"Fanta\", \"Sprite\"],\r\n          selected: [],\r\n          DataViewer: ListDataViewer\r\n        } as Cell\r\n      ]\r\n    ];\r\n    return result;\r\n  }\r\n\r\n  private getData(query?: Query) {\r\n    let userUrl = \"/users\";\r\n    let issuesUrl = \"/issues\";\r\n\r\n    if (query) {\r\n      if (query.userName) {\r\n        userUrl = `${userUrl}/${query.userName}`;\r\n      }\r\n\r\n      var issuesQuery = \"\";\r\n      if (query.issue) {\r\n        issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n      }\r\n\r\n      var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n      var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n      if (issuesQuery.endsWith(\"&\")) {\r\n        issuesQuery = issuesQuery.slice(0, -1);\r\n      }\r\n\r\n      issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n    }\r\n\r\n    return Promise.all([\r\n      axiosInstance.get(userUrl),\r\n      axiosInstance.get(issuesUrl)\r\n    ]);\r\n  }\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE,\r\n  SELECT,\r\n  UNSELECT_ALL,\r\n  MULTI_DRAG_SINGLE_DESTINATION\r\n} from \"./action-types\";\r\nimport { DataService, Query } from \"./data-service\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { MultiDragItem } from \"./model/cell/multi-drag-item\";\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure([error]));\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n};\r\n\r\nexport const fetchDataSuccess = result => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n};\r\n\r\nexport const fetchDataFailure = error => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n};\r\n\r\nexport const reorderAction = (row: number, col: number, data: Array<any>) => {\r\n  return {\r\n    type: REORDER,\r\n    payload: {\r\n      row,\r\n      col,\r\n      data\r\n    }\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  sourRow: number,\r\n  sourCol: number,\r\n  sourData: Array<any>,\r\n  destRow: number,\r\n  destCol: number,\r\n  destData: Array<any>\r\n) => {\r\n  return {\r\n    type: MOVE,\r\n    payload: {\r\n      sourRow,\r\n      sourCol,\r\n      sourData,\r\n      destRow,\r\n      destCol,\r\n      destData\r\n    }\r\n  };\r\n};\r\n\r\nexport const selectAction = (multiDragItem: MultiDragItem) => {\r\n  return {\r\n    type: SELECT,\r\n    payload: {\r\n      multiDragItem\r\n    }\r\n  };\r\n};\r\n\r\nexport const unselectAllAction = () => {\r\n  return {\r\n    type: UNSELECT_ALL\r\n  };\r\n};\r\n\r\nexport const singleDestinationMultiDragAndDropAction = (\r\n  sourRow: number,\r\n  sourCol: number,\r\n  destRow: number,\r\n  destCol: number\r\n) => {\r\n  return {\r\n    type: MULTI_DRAG_SINGLE_DESTINATION,\r\n    payload: {\r\n      sourRow,\r\n      sourCol,\r\n      destRow,\r\n      destCol\r\n    }\r\n  };\r\n};\r\n","export const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\r\nexport const SELECT = 'SELECT';\r\nexport const UNSELECT_ALL = 'UNSELECT_ALL';\r\nexport const MULTI_DRAG_SINGLE_DESTINATION = 'MULTI_DRAG_SINGLE_DESTINATION';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between',\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","export const hideElements = (elements) => elements.forEach(el => {\r\n   el.style.visibility = 'hidden';\r\n });","import React, { useEffect } from 'react';\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { fetchDataAction, reorderAction, moveAction, unselectAllAction, singleDestinationMultiDragAndDropAction } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { Query } from '../data-service';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport BounceLoader from 'react-spinners/BounceLoader'\r\nimport { reorder, move } from '../../shared/drag-and-drop-utils';\r\n\r\nconst JiraPlanningCalendar = () => {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const filterHandler = async (data) => {\r\n    const query: Query = {\r\n      userName: data.user,\r\n      issue: data.issue,\r\n      startDate: new Date(data.startDate),\r\n      endDate: new Date(data.endDate)\r\n    }\r\n\r\n    dispatch(fetchDataAction(query));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.isLoading) {\r\n      hideElements(document.querySelectorAll('.FloatingRect'));\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', () => {\r\n      hideElements(document.querySelectorAll('.ActiveCell'))\r\n\r\n    }, true);\r\n  }, [state.isLoading])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDataAction());\r\n  }, []);\r\n\r\n  const getList = (row: number, col: number) => {\r\n    return state.data[row][col].value;\r\n  }\r\n\r\n  const onDragStart = (result: any) => {\r\n    const id: string = result.draggableId;\r\n\r\n    if (!state.selectedItems.includes({id})) {\r\n      dispatch(unselectAllAction());\r\n    }\r\n  }\r\n\r\n  const onDragEnd = (result: any) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (state.selectedItems) {\r\n      handleMultiDrag(source, destination);\r\n    } else {\r\n      handleSimpleDrag(source, destination);\r\n    }\r\n  }\r\n\r\n  const handleSimpleDrag = (source, destination) => {\r\n    if (source.droppableId === destination.droppableId) {\r\n      const cellPosition = JSON.parse(source.droppableId);\r\n      const row = cellPosition.row;\r\n      const col = cellPosition.col;\r\n      const result = reorder(getList(row, col), source.index, destination.index);\r\n\r\n      dispatch(reorderAction(row, col, result));\r\n    } else {\r\n      const sourceCellPosition = JSON.parse(source.droppableId);\r\n      const destinationCellPosition = JSON.parse(destination.droppableId);\r\n      const sourceRow = sourceCellPosition.row;\r\n      const sourceCol = sourceCellPosition.col;\r\n      const destinationRow = destinationCellPosition.row;\r\n      const destinationCol = destinationCellPosition.col;\r\n      const result = move(getList(sourceRow, sourceCol), getList(destinationRow, destinationCol), source, destination);\r\n\r\n      dispatch(moveAction(sourceRow, sourceCol, result[source.droppableId], destinationRow, destinationCol, result[destination.droppableId]));\r\n    }\r\n  }\r\n\r\n  const handleMultiDrag = (source, destination) => {\r\n    const sourceCellPosition = JSON.parse(source.droppableId);\r\n      const destinationCellPosition = JSON.parse(destination.droppableId);\r\n      const sourceRow = sourceCellPosition.row;\r\n      const sourceCol = sourceCellPosition.col;\r\n      const destinationRow = destinationCellPosition.row;\r\n      const destinationCol = destinationCellPosition.col;\r\n\r\n    dispatch(singleDestinationMultiDragAndDropAction(sourceRow, sourceCol, destinationRow, destinationCol));\r\n  }\r\n\r\n  const getContainerStyle = () => ({\r\n    paddingTop: '1%',\r\n    paddingBottom: '1%',\r\n    paddingLeft: '1.5%',\r\n    paddingRight: '1.5%',\r\n    backgroundColor: 'white',\r\n  } as React.CSSProperties)\r\n\r\n  const getCalendarContainerStyle = () => ({\r\n    height: '600px',\r\n    marginTop: '1%'\r\n  } as React.CSSProperties)\r\n\r\n  const getSpreadSheetStyle = () => ({\r\n    '.Spreadsheet td': {\r\n      whiteSpace: 'pre'\r\n    }\r\n  } as React.CSSProperties)\r\n\r\n  return (\r\n    <div style={getContainerStyle()}>\r\n      <div>\r\n        <JiraPlanningCalendarFilter\r\n          filterHandler={filterHandler}\r\n        />\r\n      </div>\r\n      <LoadingOverlay\r\n        active={state.isLoading}\r\n        spinner={<BounceLoader color='#0052CC' />}\r\n        styles={{\r\n          overlay: (base) => ({\r\n            ...base,\r\n            background: '#D9FFFFFF'\r\n          }),\r\n        }}>\r\n        <div style={getCalendarContainerStyle()}>\r\n          <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>\r\n            <Spreadsheet style={getSpreadSheetStyle()} data={state.data} />\r\n          </DragDropContext>\r\n        </div>\r\n      </LoadingOverlay>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JiraPlanningCalendar;","export const reorder = (\r\n  list: Array<any>,\r\n  startIndex: number,\r\n  endIndex: number\r\n) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nexport const move = (\r\n  source: Array<any>,\r\n  destination: Array<any>,\r\n  droppableSource,\r\n  droppableDestination\r\n) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE,\r\n  SELECT,\r\n  UNSELECT_ALL,\r\n  MULTI_DRAG_SINGLE_DESTINATION\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: [],\r\n  selectedItems: [],\r\n  errors: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const cell: Cell = Object.assign({}, state.data[action.payload.row][action.payload.col]);\r\n      cell.value = action.payload.data;\r\n\r\n      const reorderResult: Array<Array<Cell>> = [...state.data];\r\n      reorderResult[action.payload.row][action.payload.col] = cell;\r\n\r\n      return {\r\n        isLoading: false,\r\n        data: reorderResult,\r\n        selectedItems: state.selectedItems,\r\n        errors: []\r\n      } as State;\r\n    case MOVE:\r\n      const sourCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.sourRow][action.payload.sourCol]\r\n      );\r\n      sourCell.value = action.payload.sourData;\r\n      const destCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.destRow][action.payload.destCol]\r\n      );\r\n      destCell.value = action.payload.destData;\r\n\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      moveResult[action.payload.sourRow][action.payload.sourCol] = sourCell;\r\n      moveResult[action.payload.destRow][action.payload.destCol] = destCell;\r\n\r\n      return {\r\n        isLoading: false,\r\n        data: moveResult,\r\n        selectedItems: state.selectedItems,\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_REQUEST:\r\n      return {\r\n        isLoading: true,\r\n        data: [...state.data],\r\n        selectedItems: [],\r\n        errors: []       \r\n      } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload],\r\n        selectedItems: [],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n      return {\r\n        isLoading: false,\r\n        data: [],\r\n        selectedItems: [],\r\n        errors: [...action.payload]\r\n      } as State;\r\n    case SELECT:      \r\n      return {\r\n        isLoading: false,\r\n        data: [...state.data],\r\n        selectedItems: [...state.selectedItems, action.payload.selectedItem],\r\n        errors: []\r\n      } as State;\r\n      case UNSELECT_ALL:\r\n        return {\r\n          isLoading: false,\r\n          data: [...state.data],\r\n          selectedItems: [],\r\n          errors: []\r\n        } as State;\r\n      case MULTI_DRAG_SINGLE_DESTINATION:\r\n        const singleDestinationMultiDragResult = [...state.data];\r\n        const sourRow = action.payload.sourRow;\r\n        const sourCol = action.payload.sourCol;\r\n        const destRow = action.payload.destRow;\r\n        const destCol = action.payload.destCol;\r\n\r\n        const sourceCell: Cell = Object.assign({}, singleDestinationMultiDragResult[sourRow][sourCol]);\r\n        const destinationCell: Cell = Object.assign({}, singleDestinationMultiDragResult[destRow][destCol]);\r\n\r\n        state.selectedItems.forEach(item => {\r\n          sourceCell.value = sourceCell.value.filter(x => x !== item.value);\r\n          destinationCell.value.push(item.value);\r\n        });\r\n\r\n        singleDestinationMultiDragResult[sourRow][sourCol] = sourceCell;\r\n        singleDestinationMultiDragResult[destRow][destCol] = destinationCell;\r\n\r\n        console.log(sourceCell);\r\n        return {\r\n          isLoading: false,\r\n          data: singleDestinationMultiDragResult,\r\n          selectedItems: [],\r\n          errors: []\r\n        } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
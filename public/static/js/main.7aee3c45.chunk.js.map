{"version":3,"sources":["modules/jira-planning-calendar/model/cell/cell-type.ts","modules/shared/components/Tooltip.tsx","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/shared/date-helper.ts","modules/jira-planning-calendar/domain/issue/issue-part.ts","modules/jira-planning-calendar/domain/issue/issue-sort.ts","modules/jira-planning-calendar/data-creator.ts","jira.ts","modules/jira-planning-calendar/domain/issue/issue.ts","modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","axios.ts","token.js","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/dom-element-helper.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["CellType","Tooltip","props","className","label","primaryColor","secondaryColor","size","items","ListDataViewer","cellType","cell","row","col","droppableId","JSON","stringify","isDraggable","DRAGGABLE","DRAG_AND_DROP","isDropDisabled","DROPPABLE","provided","snapshot","ref","innerRef","style","isDraggingOver","height","background","value","map","item","index","key","id","draggableId","isDragDisabled","draggableProps","dragHandleProps","isDragging","draggableStyle","color","display","userSelect","padding","flexDirection","alignItems","justifyContent","issue","warnings","length","marginLeft","marginRight","title","onClick","issueUrl","url","console","log","window","open","cursor","placeholder","getDateRange","startDate","endDate","dateArray","Array","start","Date","end","push","setDate","getDate","getNumberOfDays","startMoment","moment","endMoment","Math","trunc","duration","diff","asDays","isSame","date1","date2","date1Moment","date2Moment","IssuePart","actualPart","totalParts","this","uuid","sortByLengthAndKey","item1","item2","randomColor","require","CalendarDataCreator","users","issues","data","dates","currentDateCol","rowCount","colCount","init","addDates","addUsers","addIssues","forEach","date","createCell","toLocaleDateString","READONLY","addCell","user","displayName","issuesMap","Map","colorMap","created","dueDate","issueParts","all","get","luminosity","format","alpha","set","startDateIndex","findIndex","dueDateIndex","dateCells","slice","userIndex","accountId","assignee","Error","dateCell","idx","sort","columnCount","i","j","getCellType","emptyCell","currentCol","dataViewer","DataViewer","JIRA_BROWSE_URL","Issue","project","creator","UserParser","json","accountType","isActive","active","object","result","parsedUser","fromJson","ProjectParser","name","element","IssueParser","userParser","projectParser","fields","customfield_10015","undefined","duedate","axiosInstance","Axios","create","baseURL","interceptors","request","use","config","parent","token","DataService","defaultQuery","startOf","toDate","endOf","query","getData","parseArrayFromJson","createData","userUrl","issuesUrl","userName","issuesQuery","endsWith","Promise","fetchDataAction","dispatch","a","async","fetchDataRequested","dataService","loadData","fetchDataSuccess","fetchDataFailure","type","payload","error","move","sourCells","destCells","JiraPlanningCalendarFilter","getFilterItemStyle","pos","width","flex","alignSelf","filterHandler","Form","onSubmit","formProps","submitting","dirty","flexWrap","alignContent","Field","defaultValue","fieldProps","valid","DatePicker","Textfield","marginTop","Button","appearance","isDisabled","hideElements","elements","el","visibility","JiraPlanningCalendar","state","useSelector","useDispatch","useEffect","isLoading","document","querySelectorAll","body","addEventListener","handleDragAndDrop","source","destination","cellPos","parse","sourCellPos","destCellPos","issuePart","sourPos","destPos","draggable","getState","moveResult","startIndex","endIndex","parts","find","newCell","Object","assign","filter","splice","moveAction","spinner","styles","overlay","base","onDragEnd","Boolean","location","hostname","match","initialState","errors","rootReducer","action","reorderResult","cells","concat","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aee3c45.chunk.js","sourcesContent":["export enum CellType {\r\n   READONLY, DROPPABLE, DRAGGABLE, DRAG_AND_DROP\r\n}","import React from 'react';\r\nimport WarningIcon from '@atlaskit/icon/glyph/warning';\r\nimport './Tooltip.css';\r\n\r\nconst Tooltip = (props) => {\r\n   return (\r\n      <div className='tooltip icon'>\r\n         <WarningIcon label='warning-icon' primaryColor='#FF991F' secondaryColor='#FFFAE5' size='medium'/>\r\n         <div className='tooltipText'>\r\n            {props.items}\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Tooltip;","import React from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { IssuePart } from './../domain/issue/issue-part';\r\nimport { CellType } from '../model/cell/cell-type';\r\nimport Tooltip from '../../shared/components/Tooltip';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const droppableId = JSON.stringify({ row, col });\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle, color) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      background: isDragging ? 'lightgreen' : color,\r\n      flexDirection: 'row',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      height: '100%',\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleOpenIssue = (issueUrl: string) => {\r\n      console.log(issueUrl)\r\n      window.open(issueUrl, '_blank');\r\n   }\r\n\r\n   const isDraggable = (cellType: CellType): boolean => {\r\n      return cellType === CellType.DRAGGABLE || cellType === CellType.DRAG_AND_DROP;\r\n   }\r\n\r\n   const isDroppable = (cellType: CellType): boolean => {\r\n      return cellType === CellType.DROPPABLE || cellType === CellType.DRAG_AND_DROP;\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={droppableId} isDropDisabled={!isDroppable(cell.cellType)}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item: IssuePart, index: number) => (\r\n                  <Draggable\r\n                     key={item.id}\r\n                     draggableId={item.id}\r\n                     index={index}\r\n                     isDragDisabled={!isDraggable(cell.cellType)}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n                           {...provided.dragHandleProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style,\r\n                              item.color\r\n                           )}>\r\n\r\n                           {item.issue.warnings.length > 0 ? <Tooltip items={item.issue.warnings} /> : null}\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item.title}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item.issue.url)} style={getListItemIconStyle()}>\r\n                              <OpenIcon label='open' size='medium' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import moment from \"moment\";\r\n\r\nexport const getDateRange = (startDate: Date, endDate: Date): Array<Date> => {\r\n  const dateArray = new Array<Date>();\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n\r\n  while (start <= end) {\r\n    dateArray.push(new Date(start));\r\n    start.setDate(start.getDate() + 1);\r\n  }\r\n  return dateArray;\r\n};\r\n\r\nexport const getNumberOfDays = (startDate: Date, endDate: Date): number => {\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n\r\n  const startMoment = moment(start.setDate(start.getDate() - 1));\r\n  const endMoment = moment(end);\r\n  return Math.trunc(moment.duration(endMoment.diff(startMoment)).asDays());\r\n};\r\n\r\nexport const isToday = (date: Date): boolean => {\r\n  return moment(date).isSame(moment(), \"day\");\r\n};\r\n\r\nexport const isFuture = (date: Date): boolean => {\r\n  return moment(date).isAfter(moment(), \"day\");\r\n};\r\n\r\nexport const isSame = (date1: Date, date2: Date): boolean => {\r\n  const date1Moment = moment(date1);\r\n  const date2Moment = moment(date2);\r\n\r\n  return (\r\n    date1Moment.isSame(date2Moment, \"year\") &&\r\n    date1Moment.isSame(date2Moment, \"month\") &&\r\n    date1Moment.isSame(date2Moment, \"day\")\r\n  );\r\n};\r\n","import { Issue } from \"./issue\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport class IssuePart {\r\n   id: string;\r\n   issue: Issue;\r\n   actualPart: number;\r\n   totalParts: number;\r\n   color: string | undefined;\r\n\r\n   get isStart(): boolean {\r\n      return this.actualPart === 0;\r\n   }\r\n\r\n   get isEnd(): boolean {\r\n      return this.actualPart === this.totalParts - 1;\r\n   }\r\n\r\n   get isSinglePart(): boolean {\r\n      return this.totalParts === 1;\r\n   }\r\n\r\n   get title(): string {\r\n      return this.issue.key;\r\n   }\r\n\r\n   constructor(issue: Issue, actualPart: number, totalParts: number, color: string | undefined) {\r\n      this.id = uuid();\r\n      this.issue = issue;\r\n      this.actualPart = actualPart;\r\n      this.totalParts = totalParts;     \r\n      this.color = color \r\n   }\r\n   \r\n}","import { IssuePart } from \"./issue-part\";\r\n\r\nexport const sortByLengthAndKey = (item1: IssuePart, item2: IssuePart) => {\r\n   if (item1.issue.key > item2.issue.key) {\r\n     return 1;\r\n   }\r\n\r\n   return item1.totalParts < item2.totalParts ? 1 : -1;\r\n }","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport {\r\n  getNumberOfDays,\r\n  getDateRange,\r\n  isToday,\r\n  isFuture,\r\n  isSame\r\n} from \"../shared/date-helper\";\r\nimport { IssuePart } from \"./domain/issue/issue-part\";\r\nimport { CellType } from \"./model/cell/cell-type\";\r\nimport { sortByLengthAndKey } from \"./domain/issue/issue-sort\";\r\nvar randomColor = require(\"randomcolor\");\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<User>();\r\n  private issues = new Array<Issue>();\r\n  private dates = new Array<Date>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n  private currentDateCol: number;\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.currentDateCol = getNumberOfDays(startDate, new Date());\r\n    this.dates = getDateRange(this.startDate, this.endDate);\r\n    this.users = users;\r\n    this.issues = issues;\r\n\r\n    const rowCount = this.users.length + 1;\r\n    const colCount = getNumberOfDays(this.startDate, this.endDate) + 1;\r\n    this.init(rowCount, colCount);\r\n  }\r\n\r\n  createData(): Array<Array<Cell>> {\r\n    this.addDates();\r\n    this.addUsers();\r\n    this.addIssues();\r\n    return this.data;\r\n  }\r\n\r\n  private addDates(): void {\r\n    this.dates.forEach((date: Date, index: number) => {\r\n      const cell = this.createCell(\r\n        0,\r\n        index + 1,\r\n        date.toLocaleDateString(),\r\n        CellType.READONLY\r\n      );\r\n      this.addCell(cell);\r\n    });\r\n  }\r\n\r\n  private addUsers(): void {\r\n    this.users.forEach((user: User, index: number) => {\r\n      const cell = this.createCell(\r\n        index + 1,\r\n        0,\r\n        user.displayName,\r\n        CellType.READONLY\r\n      );\r\n      this.addCell(cell);\r\n    });\r\n  }\r\n\r\n  private addIssues(): void {\r\n    const issuesMap = new Map<string, Array<IssuePart>>();\r\n    const colorMap = new Map<string, string | undefined>();\r\n\r\n    this.issues.forEach((issue: Issue, index: number) => {\r\n      const startDate = issue.startDate ? issue.startDate : issue.created;\r\n      const endDate = issue.dueDate ? issue.dueDate : this.endDate;\r\n\r\n      const issueParts = getDateRange(startDate, endDate).map(\r\n        (date, index, all) => {\r\n          let color = colorMap.get(issue.key);\r\n\r\n          if (!color) {\r\n            color = randomColor({\r\n              luminosity: \"light\",\r\n              format: \"rgba\",\r\n              alpha: 0.8\r\n            });\r\n            colorMap.set(issue.key, color);\r\n          }\r\n          return new IssuePart(issue, index, all.length, color);\r\n        }\r\n      );\r\n\r\n      const startDateIndex = this.dates.findIndex(date =>\r\n        isSame(date, startDate)\r\n      );\r\n\r\n      let dueDateIndex = this.dates.findIndex(date => isSame(date, endDate));\r\n\r\n      if (dueDateIndex !== -1) {\r\n        dueDateIndex = dueDateIndex + 1;\r\n      }\r\n\r\n      const dateCells = this.dates.slice(startDateIndex, dueDateIndex);\r\n      const userIndex = this.users.findIndex(\r\n        (user: User) => user.accountId === issue.assignee.accountId\r\n      );\r\n\r\n      if (userIndex === -1) {\r\n        throw new Error(\r\n          \"No users were found. Without users, issues cannot be displayed\"\r\n        );\r\n      }\r\n\r\n      const row = userIndex + 1;\r\n      dateCells.forEach((dateCell, idx) => {\r\n        const col = startDateIndex + idx + 1;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issueParts[idx]);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n\r\n        const cell: Cell = this.createCell(\r\n          row,\r\n          col,\r\n          data.sort(sortByLengthAndKey),\r\n          CellType.DRAG_AND_DROP,\r\n          ListDataViewer\r\n        );\r\n        this.addCell(cell);\r\n      });\r\n    });\r\n  }\r\n\r\n  private init(rowCount: number, columnCount: number): void {\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const cellType: CellType = this.getCellType(j);\r\n\r\n        const emptyCell = this.createCell(i, j, [], cellType, ListDataViewer);\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getCellType(currentCol: number): CellType {\r\n    let cellType: CellType;\r\n    if (this.currentDateCol === currentCol) {\r\n      cellType = CellType.DRAG_AND_DROP;\r\n    } else if (this.currentDateCol < currentCol) {\r\n      cellType = CellType.DRAGGABLE;\r\n    } else {\r\n      cellType = CellType.READONLY;\r\n    }\r\n    return cellType;\r\n  }\r\n\r\n  private createCell(\r\n    row: number,\r\n    col: number,\r\n    value: any,\r\n    cellType: CellType,\r\n    dataViewer?: any\r\n  ): Cell {\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      value: value,\r\n      DataViewer: dataViewer,\r\n      cellType: cellType\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n}\r\n","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import { Project } from \"../project/project\";\r\nimport { User } from \"../user/user\";\r\nimport { JIRA_BROWSE_URL } from \"../../../../jira\";\r\n\r\nexport class Issue {\r\n  key: string;\r\n  project: Project;\r\n  assignee: User;\r\n  creator: User;\r\n  created: Date;\r\n  startDate: Date | undefined;\r\n  dueDate: Date | undefined;\r\n  url: string;\r\n  warnings: Array<string>;\r\n\r\n  constructor(\r\n    key: string,\r\n    project: Project,\r\n    assignee: User,\r\n    creator: User,\r\n    created: Date,\r\n    startDate: Date | undefined,\r\n    dueDate: Date | undefined,\r\n    warnings: Array<string> = []\r\n  ) {\r\n    this.key = key;\r\n    this.project = project;\r\n    this.assignee = assignee;\r\n    this.creator = creator;\r\n    this.created = created;\r\n    this.startDate = startDate;\r\n    this.dueDate = dueDate;\r\n    this.url = `${JIRA_BROWSE_URL}${key}`;\r\n    this.warnings = warnings;\r\n  }\r\n}\r\n","import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    const key = data.key;\r\n    const assignee = userParser.fromJson(data.fields.assignee);\r\n    const creator = userParser.fromJson(data.fields.creator);\r\n    const created = new Date(data.fields.created);\r\n    const project = projectParser.fromJson(data.fields.project);\r\n    const startDate = data.fields.customfield_10015 ? new Date(data.fields.customfield_10015) : undefined;\r\n    const dueDate = data.fields.duedate ? new Date(data.fields.duedate) : undefined;\r\n\r\n    return new Issue(key, project, assignee, creator, created, startDate, dueDate);\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { CalendarDataCreator } from \"./data-creator\";\r\nimport moment from \"moment\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport { Project } from \"./domain/project/project\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { axiosInstance } from \"../../axios\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    const data = await this.getData(query);\r\n    const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n    console.log(data[1].data.issues)\r\n    return new CalendarDataCreator(users, issues, query.startDate, query.endDate).createData();\r\n\r\n    return testData();\r\n  }\r\n\r\n  private getData(query?: Query) {\r\n    let userUrl = \"/users\";\r\n    let issuesUrl = \"/issues\";\r\n  \r\n    if (query) {\r\n      if (query.userName) {\r\n        userUrl = `${userUrl}/${query.userName}`;\r\n      }\r\n  \r\n      var issuesQuery = \"\";\r\n      if (query.issue) {\r\n        issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n      }\r\n  \r\n      var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n  \r\n      var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n  \r\n      if (issuesQuery.endsWith(\"&\")) {\r\n        issuesQuery = issuesQuery.slice(0, -1);\r\n      }\r\n  \r\n      issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n    }\r\n  \r\n    return Promise.all([\r\n      axiosInstance.get(userUrl),\r\n      axiosInstance.get(issuesUrl)\r\n    ]);\r\n  }\r\n}\r\n\r\nconst testData = () => {\r\n  const users = [\r\n    {\r\n      displayName: \"Adam Blasko\",\r\n      accountId: \"0\",\r\n      accountType: \"atlassian\",\r\n      isActive: true\r\n    } as User,\r\n    {\r\n      displayName: \"Ben Kusicky\",\r\n      accountId: \"1\",\r\n      accountType: \"atlassian\",\r\n      isActive: true\r\n    } as User\r\n  ];\r\n\r\n  const project = {\r\n    key: \"JPC\",\r\n    name: \"Jira planning calendar\"\r\n  } as Project;\r\n\r\n  const issue1 = new Issue(\r\n    \"XAM-5147\",\r\n    project,\r\n    users[0],\r\n    users[0],\r\n    new Date(),\r\n    undefined,\r\n    new Date(new Date().setDate(new Date().getDate() + 2)),\r\n    ['Start date is not defined']\r\n  );\r\n  const issue2 = new Issue(\r\n    \"XAM-5777\",\r\n    project,\r\n    users[1],\r\n    users[1],\r\n    new Date(),\r\n    new Date(),\r\n    new Date(new Date().setDate(new Date().getDate() + 1))\r\n  );\r\n\r\n  const startDate = moment()\r\n    .startOf(\"isoWeek\")\r\n    .toDate();\r\n  const endDate = moment()\r\n    .endOf(\"isoWeek\")\r\n    .toDate();\r\n\r\n  const result = new CalendarDataCreator(\r\n    users,\r\n    [issue1, issue2],\r\n    startDate,\r\n    endDate\r\n  )\r\n  return result.createData();\r\n};\r\n\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { DataService, Query } from \"./data-service\";\r\nimport { Position } from \"../shared/position\";\r\nimport { IssuePart } from \"./domain/issue/issue-part\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\nimport { sortByLengthAndKey } from './domain/issue/issue-sort';\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure([error]));\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = result => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n};\r\n\r\nconst fetchDataFailure = error => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n};\r\n\r\nexport const reorderAction = (\r\n  pos: Position,\r\n  sourIndex: number,\r\n  destIndex: number\r\n) => {\r\n  return (dispatch, getState) => {\r\n    const state: State = getState();\r\n\r\n    const data = [...state.data];\r\n    const issuePart: IssuePart = data[pos.row][pos.col].value[sourIndex];\r\n\r\n    const startIndex = pos.col - issuePart.actualPart;\r\n    const endIndex = startIndex + issuePart.totalParts;\r\n\r\n    const cells: Array<Cell> = data[pos.row].slice(startIndex, endIndex);\r\n    cells.forEach((cell: Cell) => {\r\n      const [removed] = cell.value.splice(sourIndex, 1);\r\n      cell.value.splice(destIndex, 0, removed);\r\n    });\r\n\r\n    dispatch(reorder(pos, cells));\r\n  };\r\n};\r\n\r\nconst reorder = (pos: Position, cells: Array<Cell>) => {\r\n  return {\r\n    type: REORDER,\r\n    payload: {\r\n      pos,\r\n      cells\r\n    }\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  draggable: IssuePart,\r\n  sourPos: Position,\r\n  destPos: Position\r\n) => {\r\n  return (dispatch, getState) => {\r\n    const state: State = getState();\r\n    const moveResult = [...state.data];\r\n\r\n    const startIndex = sourPos.col;\r\n    const endIndex = startIndex + draggable.totalParts - draggable.actualPart;\r\n\r\n    const parts = moveResult[sourPos.row]\r\n      .slice(startIndex, endIndex)\r\n      .map((cell: Cell) => {\r\n        return cell.value.find(\r\n          (issuePart: IssuePart) => issuePart.issue.key === draggable.issue.key\r\n        );\r\n      });\r\n\r\n    const sourCells: Array<Cell> = moveResult[sourPos.row].slice(\r\n      sourPos.col,\r\n      sourPos.col + parts.length\r\n    );\r\n    sourCells.forEach((cell: Cell, index) => {\r\n      const newCell: Cell = Object.assign({}, cell);\r\n      newCell.value = cell.value.filter(\r\n        (issuePart: IssuePart) => issuePart.issue.key !== draggable.issue.key\r\n      );\r\n      sourCells[index] = newCell;\r\n    });\r\n\r\n    const destCells: Array<Cell> = moveResult[destPos.row].slice(\r\n      destPos.col,\r\n      destPos.col + parts.length\r\n    );\r\n    destCells.forEach((cell: Cell) => {\r\n      const newCell: Cell = Object.assign({}, cell);\r\n      const item = parts.splice(0, 1)[0];\r\n      newCell.value.push(item);\r\n      newCell.value = newCell.value.sort(sortByLengthAndKey);\r\n    });\r\n\r\n    dispatch(move(sourCells, destCells))\r\n  };\r\n};\r\n\r\nconst move = (sourCells: Array<Cell>, destCells: Array<Cell>) => {\r\n  return {\r\n    type: MOVE,\r\n    payload: {\r\n      sourCells,\r\n      destCells\r\n    }\r\n  };\r\n};\r\n","export const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between',\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","export const hideElements = (elements) => elements.forEach(el => {\r\n   el.style.visibility = 'hidden';\r\n });","import React, { useEffect } from 'react';\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { fetchDataAction, reorderAction, moveAction } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\r\nimport { DragDropContext, DropResult, DraggableLocation } from 'react-beautiful-dnd';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { Query } from '../data-service';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport BounceLoader from 'react-spinners/BounceLoader'\r\nimport { State } from './../state';\r\nimport { Position } from '../../shared/position';\r\nimport './JiraPlanningCalendar.css';\r\n\r\nconst JiraPlanningCalendar = () => {\r\n  const state = useSelector((state: State) => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const filterHandler = async (data) => {\r\n    const query: Query = {\r\n      userName: data.user,\r\n      issue: data.issue,\r\n      startDate: new Date(data.startDate),\r\n      endDate: new Date(data.endDate)\r\n    }\r\n\r\n    dispatch(fetchDataAction(query));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.isLoading) {\r\n      hideElements(document.querySelectorAll('.FloatingRect'));\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', () => {\r\n      hideElements(document.querySelectorAll('.ActiveCell'))\r\n\r\n    }, true);\r\n  }, [state.isLoading])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDataAction());\r\n  }, []);\r\n\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    handleDragAndDrop(source, destination);\r\n  }\r\n\r\n  const handleDragAndDrop = (source: DraggableLocation, destination: DraggableLocation) => {\r\n    if (source.droppableId === destination.droppableId) {\r\n      const cellPos = JSON.parse(source.droppableId);\r\n      const positon = {\r\n        row: cellPos.row,\r\n        col: cellPos.col\r\n      } as Position;\r\n\r\n      // dispatch(\r\n      //   reorderAction(positon, source.index, destination.index)\r\n      // );\r\n    } else {\r\n      const sourCellPos = JSON.parse(source.droppableId);\r\n      const destCellPos = JSON.parse(destination.droppableId);\r\n\r\n      const issuePart = state.data[sourCellPos.row][sourCellPos.col].value[source.index];\r\n\r\n      const sourPos = {\r\n        row: sourCellPos.row,\r\n        col: sourCellPos.col\r\n      } as Position;\r\n\r\n      const destPos = {\r\n        row: destCellPos.row,\r\n        col: destCellPos.col\r\n      } as Position;\r\n\r\n      dispatch(\r\n        moveAction(issuePart, sourPos, destPos)\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div>\r\n        <JiraPlanningCalendarFilter\r\n          filterHandler={filterHandler}\r\n        />\r\n      </div>\r\n      <LoadingOverlay\r\n        active={state.isLoading}\r\n        spinner={<BounceLoader color='#0052CC' />}\r\n        styles={{\r\n          overlay: (base: any) => ({\r\n            ...base,\r\n            background: '#D9FFFFFF'\r\n          }),\r\n        }}>\r\n        <div className='calendar'>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <Spreadsheet data={state.data} />\r\n          </DragDropContext>\r\n        </div>\r\n      </LoadingOverlay>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: [],\r\n  errors: []\r\n};\r\n\r\nconst rootReducer = (state: State = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const reorderResult = [...state.data];\r\n\r\n      action.payload.cells.forEach((cell: Cell) => {\r\n        reorderResult[cell.row][cell.col] = Object.assign({}, cell);\r\n      });\r\n      \r\n      return {\r\n        isLoading: false,\r\n        data: reorderResult,\r\n        errors: []\r\n      } as State;\r\n    case MOVE:\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      const cells: Array<Cell> = action.payload.sourCells.concat(\r\n        action.payload.destCells\r\n      );\r\n\r\n      cells.forEach((cell: Cell) => {\r\n        moveResult[cell.row][cell.col] = Object.assign({}, cell);\r\n      });\r\n      return {\r\n        isLoading: false,\r\n        data: moveResult,\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_REQUEST:\r\n      return {\r\n        isLoading: true,\r\n        data: [...state.data],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n      return {\r\n        isLoading: false,\r\n        data: [],\r\n        errors: [...action.payload]\r\n      } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
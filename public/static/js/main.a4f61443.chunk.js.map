{"version":3,"sources":["modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","axios.ts","modules/jira-planning-calendar/data-loader.ts","token.js","modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","modules/shared/events.ts","jira.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/jira-planning-calendar/components/ReadOnlyDataViewer.tsx","modules/jira-planning-calendar/data-creator.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["fetchDataAction","data","type","JiraPlanningCalendarFilter","props","getFilterItemStyle","pos","width","flex","alignSelf","marginLeft","filterHandler","Form","onSubmit","formProps","submitting","dirty","style","display","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","label","name","defaultValue","moment","startOf","format","fieldProps","error","valid","DatePicker","endOf","Textfield","marginTop","Button","appearance","isDisabled","axiosInstance","Axios","create","baseURL","getData","query","userUrl","issuesUrl","userName","issuesQuery","issue","startDate","endDate","endsWith","slice","Promise","all","get","interceptors","request","use","config","url","window","parent","token","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","Date","project","hideElements","elements","classToAdd","el","classList","add","JIRA_BROWSE_URL","ListDataViewer","cell","row","col","id","JSON","stringify","handleDragAndDrop","event","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","document","querySelectorAll","droppableId","provided","snapshot","ref","innerRef","isDraggingOver","background","padding","value","map","item","index","draggableId","onMouseDown","onMouseUp","onMouseOver","onMouseMove","draggableProps","isDragging","draggableStyle","userSelect","marginBottom","dragHandleProps","height","marginRight","onClick","open","handleOpenIssue","cursor","placeholder","ReadOnlyDataViewer","CalendarDataCreator","users","issues","dates","this","addDates","addUsers","addIssues","generateDates","length","createCell","issuesMap","Map","dateCell","find","x","toLocaleDateString","userCell","set","start","setDate","getDate","end","rowCount","columnCount","Math","trunc","duration","diff","asDays","console","log","i","j","emptyCell","addCell","dataViewer","DataViewer","dateArray","currentDate","DataService","defaultQuery","toDate","parseArrayFromJson","calendarData","JiraPlanningCalendar","dataService","useSelector","state","dispatch","useDispatch","filterData","a","async","loadData","useEffect","load","getList","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","onDragEnd","source","destination","cellPosition","parse","list","startIndex","endIndex","from","splice","removed","reorder","reorderAction","sourceCellPosition","destinationCellPosition","sourceRow","sourceCol","destinationRow","destinationCol","droppableSource","droppableDestination","sourceClone","destClone","move","sourRow","sourCol","sourData","destRow","destCol","destData","whiteSpace","Boolean","location","hostname","match","initialState","rootReducer","action","Object","assign","reorderResult","sourCell","destCell","moveResult","createStore","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4f61443.chunk.js","sourcesContent":["import { FETCH_DATA, REORDER, MOVE } from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\n\r\nexport const fetchDataAction = (data: Array<Array<Cell>>) => {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n};\r\n\r\nexport const reorderAction = (row: number, col: number, data: Array<any>) => {\r\n  return {\r\n    type: REORDER,\r\n    row,\r\n    col,\r\n    data\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  sourRow: number,\r\n  sourCol: number,\r\n  sourData: Array<any>,\r\n  destRow: number,\r\n  destCol: number,\r\n  destData: Array<any>\r\n) => {\r\n  return {\r\n    type: MOVE,\r\n    sourRow,\r\n    sourCol,\r\n    sourData,\r\n    destRow,\r\n    destCol,\r\n    destData\r\n  };\r\n};\r\n","export const FETCH_DATA = 'FETCH_DATA';\r\nexport const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between'\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","import { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\nexport function getData(query?: Query) {\r\n  let userUrl = \"/users\";\r\n  let issuesUrl = \"/issues\";\r\n\r\n  if (query) {\r\n    if (query.userName) {\r\n      userUrl = `${userUrl}/${query.userName}`;\r\n    }\r\n\r\n    var issuesQuery = \"\";\r\n    if (query.issue) {\r\n      issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n    }\r\n\r\n    var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n    var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n    if (issuesQuery.endsWith(\"&\")) {\r\n      issuesQuery = issuesQuery.slice(0, -1);\r\n    }\r\n\r\n    issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n  }\r\n\r\n  return Promise.all([\r\n    axiosInstance.get(userUrl),\r\n    axiosInstance.get(issuesUrl)\r\n  ]);\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","export const hideElements = (elements, classToAdd: string = 'hidden', classToRemove: string = 'selected') => elements.forEach(el => {\r\n   el.classList.add(classToAdd);\r\n });","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import React from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { hideElements } from '../../shared/events';\r\nimport { JIRA_BROWSE_URL } from '../../../jira';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const id = JSON.stringify({ row, col });\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : 'white',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleDragAndDrop = (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      event.nativeEvent.stopImmediatePropagation();\r\n\r\n      if (event.type === 'mousedown') {\r\n         hideElements(document.querySelectorAll('.ActiveCell'));\r\n      }\r\n   }\r\n\r\n   const handleOpenIssue = (item) => {\r\n      window.open(`${JIRA_BROWSE_URL}${item}`, '_blank');\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={id}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item, index) => (\r\n                  <Draggable\r\n                     key={item}\r\n                     draggableId={item}\r\n                     index={index}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           onMouseDown={event => handleDragAndDrop(event)}\r\n                           onMouseUp={event => handleDragAndDrop(event)}\r\n                           onMouseOver={event => handleDragAndDrop(event)}\r\n                           onMouseMove={event => handleDragAndDrop(event)}\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                           )}>\r\n                           <div {...provided.dragHandleProps} style={getListItemIconStyle()}>\r\n                              <DragHandlerIcon label='drag-handle' />\r\n                           </div>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open-icon' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import React from 'react';\r\n\r\nconst ReadOnlyDataViewer = ({ cell }) => {\r\n\r\n   return (\r\n      <div onMouseDown={event => event.stopPropagation()} onMouseOver={event => event.stopPropagation()} >\r\n         {cell.value}\r\n      </div>)\r\n}\r\n\r\nexport default ReadOnlyDataViewer;\r\n","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/Issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport moment from \"moment\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport ReadOnlyDataViewer from \"./components/ReadOnlyDataViewer\";\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.addDates();\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(): void {\r\n    const dates = this.generateDates(new Date(this.startDate), new Date(this.endDate));\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(index + 1, 0, dates[index], ReadOnlyDataViewer);\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    const issuesMap = new Map<string, Array<string>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n\r\n      const dateCell = this.dates.find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issue.key);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n        const cell = this.createCell(col, row, data, ListDataViewer);\r\n        this.issues.push(cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    const start = moment(this.startDate.setDate(this.startDate.getDate() - 1));\r\n    const end = moment(this.endDate);\r\n\r\n    const rowCount = this.users.length + 1;\r\n    const columnCount = Math.trunc(moment.duration(end.diff(start)).asDays()) + 1;\r\n\r\n    console.log(this.startDate);\r\n    console.log(this.endDate);\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const emptyCell = this.createCell(j, i, [], ListDataViewer);\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n\r\n    // dates\r\n    this.dates.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // users\r\n    this.users.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // issues\r\n    this.issues.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n  }\r\n\r\n  private createCell(\r\n    col: number,\r\n    row: number,\r\n    value: any,\r\n    dataViewer?: any\r\n  ): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value,\r\n      DataViewer: dataViewer\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import { getData, Query } from \"./data-loader\";\r\nimport { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport moment from 'moment';\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment().startOf('isoWeek').toDate(),\r\n    endDate: moment().endOf('isoWeek').toDate()\r\n  }\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    const data = await getData(query)\r\n   \r\n    const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n\r\n    const result = new CalendarDataCreator(users, issues, query.startDate, query.endDate).calendarData;\r\n    console.log(result);\r\n    return result;\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchDataAction, reorderAction, moveAction } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\nimport { DataService } from '../data-service';\nimport { Query } from '../data-loader';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Cell } from '../model/cell/cell';\nimport ListDataViewer from './ListDataViewer';\nimport { hideElements } from '../../shared/events';\n\nconst JiraPlanningCalendar = () => {\n  const dataService = new DataService();\n  const data = useSelector((state: { data: Array<Array<Cell>>; }) => state.data);\n\n  const dispatch = useDispatch();\n\n  const filterHandler = async (data) => {\n    const query: Query = {\n      userName: data.user,\n      issue: data.issue,\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate)\n    }\n\n    const result = await filterData(query);\n    dispatch(fetchDataAction(result));\n  }\n\n  const loadData = async () => {\n    return await dataService.loadData();\n  }\n\n  const filterData = async (query) => {\n    return await dataService.loadData(query);\n  }\n\n  useEffect(() => {\n    const load = async () => {\n      const result = await loadData();\n      // const result = [\n      //   [{ row: 0, col: 0, value: ['Raspberry', 'Apple'], DataViewer: ListDataViewer }, { row: 0, col: 1, value: ['Paprika', 'Onion'], DataViewer: ListDataViewer }],\n      //   [{ row: 1, col: 0, value: ['Cola', 'Fanta', 'Sprite'], DataViewer: ListDataViewer }]\n      // ];\n      dispatch(fetchDataAction(result));\n    }\n    load();\n  }, []);\n\n  const reorder = (list: Array<any>, startIndex: number, endIndex: number) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }\n\n  const move = (source: Array<any>, destination: Array<any>, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  }\n\n  const getList = (row: number, col: number) => {\n    return data[row][col].value;\n  }\n\n  const onDragEnd = (result: any) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const cellPosition = JSON.parse(source.droppableId);\n      const row = cellPosition.row;\n      const col = cellPosition.col;\n\n      const result = reorder(getList(row, col), source.index, destination.index);\n\n      dispatch(reorderAction(row, col, result));\n    } else {\n      const sourceCellPosition = JSON.parse(source.droppableId);\n      const destinationCellPosition = JSON.parse(destination.droppableId);\n      const sourceRow = sourceCellPosition.row;\n      const sourceCol = sourceCellPosition.col;\n      const destinationRow = destinationCellPosition.row;\n      const destinationCol = destinationCellPosition.col;\n\n      const result = move(getList(sourceRow, sourceCol), getList(destinationRow, destinationCol), source, destination);\n      dispatch(moveAction(sourceRow, sourceCol, result[source.droppableId], destinationRow, destinationCol, result[destination.droppableId]));\n    }\n\n     hideElements(document.querySelectorAll('.FloatingRect'))\n  }\n\n  const getContainerStyle = () => ({\n    paddingTop: '1%',\n    paddingBottom: '1%',\n    paddingLeft: '1.5%',\n    paddingRight: '1.5%',\n    backgroundColor: 'white',\n  } as React.CSSProperties)\n\n  const getCalendarContainerStyle = () => ({\n    marginTop: '1%'\n  } as React.CSSProperties)\n\n  const getSpreadSheetStyle = () => ({\n    '.Spreadsheet td': {\n      whiteSpace: 'pre'\n    }\n  } as React.CSSProperties)\n\n  return (\n    <div style={getContainerStyle()}>\n      <div>\n        <JiraPlanningCalendarFilter\n          filterHandler={filterHandler}\n        />\n      </div>\n      <div style={getCalendarContainerStyle()}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Spreadsheet style={getSpreadSheetStyle} data={data} />\n        </DragDropContext>\n      </div>\n    </div>\n  )\n}\n\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA, REORDER, MOVE } from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      return {\r\n        data: [...action.data]\r\n      };\r\n    case REORDER:\r\n      const cell: Cell = Object.assign({}, state.data[action.row][action.col]);\r\n      cell.value = action.data;\r\n\r\n      const reorderResult: Array<Array<Cell>> = [...state.data];\r\n      reorderResult[action.row][action.col] = cell;\r\n\r\n      return {\r\n        data: reorderResult\r\n      };\r\n    case MOVE:\r\n      const sourCell: Cell = Object.assign({}, state.data[action.sourRow][action.sourCol]);\r\n      sourCell.value = action.sourData;\r\n      const destCell: Cell = Object.assign({}, state.data[action.destRow][action.destCol]);\r\n      destCell.value = action.destData;\r\n\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      moveResult[action.sourRow][action.sourCol] = sourCell;\r\n      moveResult[action.destRow][action.destCol] = destCell\r\n      \r\n      return {\r\n        data: moveResult\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
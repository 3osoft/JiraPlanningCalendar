{"version":3,"sources":["modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/filter/JiraPlanningCalendarFilter.tsx","axios.ts","modules/jira-planning-calendar/data-loader.ts","token.js","modules/user/user-parser.tsx","modules/project/project-parser.ts","modules/issue/issue-parser.ts","modules/jira-planning-calendar/data-builder.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/JiraPlanningCalendar.tsx","modules/jira-planning-calendar/actions.ts","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["FETCH_DATA","FILTER_DATA","JiraPlanningCalendarFilter","Form","onSubmit","data","props","filterHandler","formProps","dirty","submitting","className","Field","label","name","defaultValue","Date","toLocaleDateString","fieldProps","error","valid","DatePicker","Textfield","Button","type","appearance","isDisabled","React","Component","axiosInstance","Axios","create","baseURL","getData","userPromise","get","issuesPromise","Promise","all","interceptors","request","use","config","url","window","parent","token","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","project","SheetDataBuilder","startDate","setDate","getDate","endDate","this","initData","users","index","length","cell","createCell","addCell","issues","issue","dateCell","find","x","value","userCell","map","newValue","col","row","existingCell","y","dates","generateDates","i","j","dateArray","currentDate","DataService","parseArrayFromJson","addUsers","addIssues","build","JiraPlanningCalendar","dataService","filterData","loadData","then","fetchData","connect","state","dispatch","Boolean","location","hostname","match","initialState","sheetReducer","action","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b7a8e58.chunk.js","sourcesContent":["export const FETCH_DATA = \"FETCH_DATA\";\r\nexport const FILTER_DATA = \"FILTER_DATA\";\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport './JiraPlanningCalendarFilter.css'\r\n\r\nclass JiraPlanningCalendarFilter extends React.Component<{ filterHandler: (data) => void }, {}> {\r\n\r\n   render() {\r\n      return (\r\n         <Form onSubmit={data => this.props.filterHandler(data)}>\r\n            {({ formProps, dirty, submitting }) => (\r\n               <form {...formProps}>\r\n                  <div className=\"filter-container\">\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Start date\" name=\"end-date\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"End date\" name=\"start-date\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"User\" name=\"user\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Issue\" name=\"issue\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"submit-button\">\r\n                        <Button\r\n                           type=\"submit\"\r\n                           appearance=\"primary\"\r\n                           isDisabled={!dirty || submitting}>\r\n                           Submit\r\n                        </Button>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            )}\r\n         </Form>\r\n      )\r\n   }\r\n}\r\n\r\nexport default JiraPlanningCalendarFilter;\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","import { axiosInstance } from \"../../axios\";\r\n\r\nexport function getData() {\r\n  var userPromise = axiosInstance.get(\"/users\");\r\n  var issuesPromise = axiosInstance.get(\"/issues\");\r\n\r\n  return Promise.all([userPromise, issuesPromise]);\r\n}\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { Parser } from \"../shared/parser\";\r\nimport { User } from \"./user\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"./../user/user-parser\";\r\nimport { ProjectParser } from \"./../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Cell } from \"./cell\";\r\nimport { User } from \"../user/user\";\r\nimport { Issue } from \"../issue/Issue\";\r\n\r\nexport class SheetDataBuilder {\r\n  private data = new Array<Array<Cell>>();\r\n  private startDate = new Date(new Date().setDate(new Date().getDate() - 1));\r\n  private endDate = new Date(new Date().setDate(new Date().getDate() + 100));\r\n \r\n  constructor() {\r\n    this.initData();\r\n  }\r\n\r\n  addUsers(users: Array<User>): SheetDataBuilder {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.addCell(cell);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addIssues(issues: Array<Issue>): SheetDataBuilder {\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n      const dateCell = this.data[0].find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n      const userCell = this.data\r\n        .map(x => x[0])\r\n        .find(x => x.value === issue.assignee.displayName);\r\n\r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n        const existingCell = this.data[row][col];\r\n\r\n        let newValue;\r\n        if (existingCell.value) {\r\n          newValue = `${existingCell.value}\\n${issue.key}`;\r\n        } else {\r\n          newValue = issue.key\r\n        }\r\n\r\n        const cell = this.createCell(col, row, newValue);\r\n        this.addCell(cell);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  build(): Array<Array<Cell>> {\r\n    return this.data;\r\n  }\r\n\r\n  private createCell(col: number, row: number, value: string): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    const x = cell.row;\r\n    const y = cell.col;\r\n    this.data[x][y] = cell;\r\n  }\r\n\r\n  private initData(): void {\r\n    const dates = this.generateDates(this.startDate, this.endDate);\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      let row: Array<Cell> = new Array<Cell>();\r\n      for (let j = 0; j < 100; j++) {\r\n        let cell;\r\n        if (i === 0 && j > 0) {\r\n          cell = { row: i, col: j, value: dates[j] } as Cell;\r\n        } else {\r\n          cell = { row: i, col: j, value: \"\" } as Cell;\r\n        }\r\n        row.push(cell);\r\n      }\r\n      this.data.push(row);\r\n    }\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import { getData } from \"./data-loader\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { IssueParser } from \"../issue/issue-parser\";\r\nimport { SheetDataBuilder } from \"./data-builder\";\r\n\r\nexport class DataService {\r\n  async loadData() {\r\n    const result = await getData();\r\n\r\n    const users = new UserParser().parseArrayFromJson(result[0].data);\r\n    const issues = new IssueParser().parseArrayFromJson(result[1].data.issues);\r\n    const data = new SheetDataBuilder()\r\n      .addUsers(users)\r\n      .addIssues(issues)\r\n      .build();\r\n\r\n    return data;\r\n  }\r\n}\r\n","import React, { Dispatch } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchData, filterData } from './actions';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport './JiraPlanningCalendar.css'\nimport JiraPlanningCalendarFilter from './filter/JiraPlanningCalendarFilter';\nimport { DataService } from './data-service';\n\ninterface StateToProps {\n  data: any\n}\n\ninterface DispatchProps {\n  fetchData: (data) => void,\n  filterData: (data) => void\n}\n\ntype Props = StateToProps & DispatchProps\nclass JiraPlanningCalendar extends React.Component<Props, {}> {\n  private dataService: DataService;\n\n  constructor(props: Props) {\n    super(props);\n    this.dataService = new DataService();\n  }\n\n  filterHandler = (data) => {\n    this.props.filterData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <JiraPlanningCalendarFilter\n            filterHandler={this.filterHandler}\n          />\n        </div>\n        <div className=\"roster-container\">\n          <Spreadsheet data={this.props.data} />\n        </div>\n      </div>\n\n    )\n  }\n\n  componentWillMount() {\n    this.dataService.loadData().then(x => {\n      this.props.fetchData(x);\n    });\n\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data\n  } as StateToProps\n}\n\nconst mapDispatchProps = (dispatch: Dispatch<AnyAction>) => ({\n  fetchData: (data) => dispatch(fetchData(data)),\n  filterData: (data) => dispatch(filterData(data))\n} as DispatchProps);\n\nexport default connect(mapStateToProps, mapDispatchProps)(JiraPlanningCalendar)\n","import { FETCH_DATA, FILTER_DATA } from \"./action-types\";\r\n\r\nexport function fetchData(data) {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n}\r\n\r\nexport function filterData(data) {\r\n  return {\r\n    type: FILTER_DATA,\r\n    data\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA, FILTER_DATA } from \"./action-types\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nfunction sheetReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    case FILTER_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sheetReducer;\r\n","import { createStore } from 'redux';\r\nimport sheetReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(sheetReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Roster from './modules/jira-planning-calendar/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Roster />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
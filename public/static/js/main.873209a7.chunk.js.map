{"version":3,"sources":["modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/components/filter/JiraPlanningCalendarFilter.tsx","axios.ts","modules/jira-planning-calendar/data-loader.ts","token.js","modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","modules/jira-planning-calendar/components/data-viewer/ListDataViewer.tsx","modules/jira-planning-calendar/data-creator.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["FETCH_DATA","REORDER","fetchDataAction","data","type","JiraPlanningCalendarFilter","props","filterHandler","Form","onSubmit","formProps","submitting","dirty","className","Field","label","name","defaultValue","moment","startOf","format","fieldProps","error","valid","DatePicker","endOf","Textfield","Button","appearance","isDisabled","axiosInstance","Axios","create","baseURL","getData","query","userUrl","issuesUrl","userName","issuesQuery","issue","startDate","endDate","endsWith","slice","Promise","all","get","interceptors","request","use","config","url","window","parent","token","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","Date","project","ListDataViewer","cell","row","col","id","JSON","stringify","droppableId","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","width","value","map","item","index","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","placeholder","CalendarDataCreator","users","issues","dates","this","addDates","addUsers","addIssues","generateDates","length","createCell","issuesMap","Map","dateCell","find","x","toLocaleDateString","userCell","console","log","set","rowCount","columnCount","start","setDate","getDate","end","Math","trunc","duration","diff","asDays","i","j","addCell","dataViewer","DataViewer","dateArray","currentDate","DataService","defaultQuery","toDate","parseArrayFromJson","calendarData","JiraPlanningCalendar","dataService","useSelector","state","dispatch","useDispatch","filterData","a","async","loadData","useEffect","onDragEnd","source","destination","cellPosition","parse","items","list","startIndex","endIndex","from","splice","removed","reorder","getList","reorderAction","Boolean","location","hostname","match","initialState","sheetReducer","action","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.873209a7.chunk.js","sourcesContent":["export const FETCH_DATA = 'FETCH_DATA';\r\nexport const REORDER = 'REORDER';","import { FETCH_DATA, REORDER } from \"./action-types\";\r\n\r\nexport function fetchDataAction(data) {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n}\r\n\r\nexport function reorderAction(row, col, data) {\r\n  return {\r\n    type: REORDER,\r\n    row,\r\n    col,\r\n    data\r\n  };\r\n}\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport './JiraPlanningCalendarFilter.css'\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter: React.FC<{ filterHandler: (data) => void }> = (props) => {\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div className=\"filter-container\">\r\n                  <div className=\"filter-item\">\r\n                     <Field label=\"Start date\" name=\"startDate\" defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div className=\"filter-item\">\r\n                     <Field label=\"End date\" name=\"endDate\" defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div className=\"filter-item\">\r\n                     <Field label=\"User\" name=\"user\" defaultValue=\"\" >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div className=\"filter-item\">\r\n                     <Field label=\"Issue\" name=\"issue\" defaultValue=\"\" >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div className=\"submit-button\">\r\n                     <Button\r\n                        type=\"submit\"\r\n                        appearance=\"primary\"\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                              </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","import { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\nexport function getData(query?: Query) {\r\n  let userUrl = \"/users\";\r\n  let issuesUrl = \"/issues\";\r\n\r\n  if (query) {\r\n    if (query.userName) {\r\n      userUrl = `${userUrl}/${query.userName}`;\r\n    }\r\n\r\n    var issuesQuery = \"\";\r\n    if (query.issue) {\r\n      issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n    }\r\n\r\n    var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n    var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n    if (issuesQuery.endsWith(\"&\")) {\r\n      issuesQuery = issuesQuery.slice(0, -1);\r\n    }\r\n\r\n    issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n  }\r\n\r\n  return Promise.all([\r\n    axiosInstance.get(userUrl),\r\n    axiosInstance.get(issuesUrl)\r\n  ]);\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const id = JSON.stringify({ row, col });\r\n   const grid = 8;\r\n\r\n   const getItemStyle = (isDragging, draggableStyle) => ({\r\n      userSelect: 'none',\r\n      padding: grid * 2,\r\n      margin: `0 0 ${grid}px 0`,\r\n\r\n      background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n      ...draggableStyle\r\n   });\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n      padding: grid,\r\n      width: 250\r\n   });\r\n\r\n   return (\r\n      <Droppable droppableId={id}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item, index) => (\r\n                  <Draggable\r\n                     key={item}\r\n                     draggableId={item}\r\n                     index={index}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n                           {...provided.dragHandleProps}\r\n                           style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                           )}>\r\n                           {item}\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )\r\n         }\r\n      </Droppable >\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;\r\n\r\n{/* <div style={{ listStyleType: 'none' }}>\r\n\r\n</div> */}","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/Issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport moment from \"moment\";\r\nimport ListDataViewer from './components/data-viewer/ListDataViewer';\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate?: Date;\r\n  private endDate?: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(users: Array<User>, issues: Array<Issue>, startDate: Date, endDate: Date) {\r\n    this.addDates(startDate, endDate);\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(startDate: Date, endDate: Date): void {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n\r\n    const dates = this.generateDates(startDate, endDate);\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(index + 1, 0, dates[index]);\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    if (!this.users) {\r\n      throw new Error('Issues can not be displayed without users. You need to set the users.')\r\n    }\r\n\r\n    if (!this.dates) {\r\n      throw new Error('Issues can not be displayed without dates. You need to set rhe dates.');\r\n    }\r\n    \r\n    const issuesMap = new Map<string, Array<string>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n      \r\n      const dateCell = this.dates.find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n      \r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({row, col}));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        } \r\n\r\n        data.push(issue.key)\r\n        console.log(data);\r\n        console.log(issuesMap);\r\n        issuesMap.set(JSON.stringify({row, col}), data);\r\n        const cell = this.createCell(col, row, data, ListDataViewer);\r\n        this.issues.push(cell);        \r\n      }\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    let rowCount: number = 1;\r\n    let columnCount: number = 7;\r\n\r\n    if (this.startDate && this.endDate) {\r\n      const start = moment(\r\n        this.startDate.setDate(this.startDate.getDate() - 1)\r\n      );\r\n      const end = moment(this.endDate);\r\n\r\n      columnCount = Math.trunc(moment.duration(end.diff(start)).asDays()) + 1;\r\n    }\r\n\r\n    if (this.users) {\r\n      rowCount = this.users.length + 1;\r\n    }\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      let row: Array<Cell> = new Array<Cell>();\r\n      for (let j = 0; j < columnCount; j++) {\r\n        row.push(this.createCell(j, i, \"\"));\r\n      }\r\n      this.data.push(row);\r\n    }\r\n\r\n    // dates\r\n    if (this.dates) {\r\n      this.dates.forEach(x => {\r\n        this.addCell(x);\r\n      });\r\n    }\r\n\r\n    // users\r\n    if (this.users) {\r\n      this.users.forEach(x => {\r\n        this.addCell(x);\r\n      });\r\n    }\r\n\r\n    // issues\r\n    if (this.issues) {\r\n      this.issues.forEach(x => {\r\n        this.addCell(x);\r\n      });\r\n    }\r\n  }\r\n\r\n  private createCell(col: number, row: number, value: any, dataViewer?: any): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value,\r\n      DataViewer: dataViewer\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import { getData, Query } from \"./data-loader\";\r\nimport { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport moment from 'moment';\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment().startOf('isoWeek').toDate(),\r\n    endDate: moment().endOf('isoWeek').toDate()\r\n  }\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    let result;\r\n    try {\r\n      result = await getData(query)\r\n    } catch(e) {\r\n      result = null;\r\n    }\r\n    \r\n    const users = result ? new UserParser().parseArrayFromJson(result[0].data) : [];\r\n    const issues = result ? new IssueParser().parseArrayFromJson(result[1].data.issues) : [];\r\n\r\n    return new CalendarDataCreator(users, issues, query.startDate, query.endDate).calendarData;\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchDataAction, reorderAction } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './JiraPlanningCalendar.css'\nimport JiraPlanningCalendarFilter from './filter/JiraPlanningCalendarFilter';\nimport { DataService } from '../data-service';\nimport { Query } from '../data-loader';\nimport ListDataViewer from './data-viewer/ListDataViewer';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst JiraPlanningCalendar = () => {\n  const dataService = new DataService();\n  const data = useSelector(state => state.data);\n\n  const dispatch = useDispatch();\n\n  const filterHandler = async (data) => {\n    const query: Query = {\n      userName: data.user,\n      issue: data.issue,\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate)\n    }\n\n    const result = await filterData(query);\n    dispatch(fetchDataAction(result));\n  }\n\n  const loadData = async () => {\n    return await dataService.loadData();\n  }\n\n  const filterData = async (query) => {\n    return await dataService.loadData(query);\n  }\n\n  useEffect(() => {\n    async function load() {\n      // const result = await loadData();\n      const result = [\n        [{ row: 0, col: 0, value: ['Raspberry', 'Apple'], DataViewer: ListDataViewer }, { row: 0, col: 1, value: ['Paprika', 'Onion'], DataViewer: ListDataViewer }],\n        [{ row: 1, col: 0, value: ['Cola', 'Fanta', 'Sprite'], DataViewer: ListDataViewer }]\n      ];\n      dispatch(fetchDataAction(result));\n    }\n    load();\n  }, []);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }\n\n  const move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  }\n  \n  const getList = (row, col) => {\n    return data[row][col].value;\n  }\n\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const cellPosition = JSON.parse(source.droppableId);\n      const row = cellPosition.row;\n      const col = cellPosition.col;\n\n      const items = reorder(getList(row, col), source.index, destination.index);\n\n      dispatch(reorderAction(row, col, items));\n\n    } else {\n\n    }\n\n  }\n\n  return (\n    <div className=\"container\">\n      <div>\n        <JiraPlanningCalendarFilter\n          filterHandler={filterHandler}\n        />\n      </div>\n      <div className=\"roster-container\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Spreadsheet data={data} />\n          {/* <Spreadsheet data={data} /> */}\n        </DragDropContext>\n      </div>\n    </div>\n  )\n}\n\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA, REORDER } from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nfunction sheetReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      return {\r\n        data: [...action.data]\r\n      };\r\n    case REORDER:\r\n      const data = [...state.data];\r\n      const cell: Cell = data[action.row][action.col];\r\n      cell.value = action.data;\r\n\r\n      return {\r\n        data: data\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sheetReducer;\r\n","import { createStore } from 'redux';\r\nimport sheetReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(sheetReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["modules/jira-planning-calendar/model/cell/cell-type.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/shared/date-helper.ts","modules/jira-planning-calendar/domain/issue/issue-part.ts","modules/jira-planning-calendar/data-creator.ts","axios.ts","token.js","jira.ts","modules/jira-planning-calendar/domain/issue/issue.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/shared/drag-and-drop-utils.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/dom-element-helper.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["CellType","ListDataViewer","cell","dispatch","useDispatch","state","useSelector","row","col","droppableId","JSON","stringify","cellId","id","getListItemStyle","isDragging","draggableStyle","isSelected","display","userSelect","padding","marginTop","marginBottom","background","borderStyle","toggleSelection","item","selectAction","selectedItems","find","x","draggableId","getMultiDragItem","issuePart","sourcePosition","value","provided","snapshot","ref","innerRef","style","isDraggingOver","map","index","key","isDragDisabled","cellType","DRAGGABLE","draggableProps","dragHandleProps","width","height","onClick","event","defaultPrevented","button","preventDefault","handleClickForMultiDrag","label","marginLeft","marginRight","issue","issueUrl","url","console","log","window","open","cursor","placeholder","getDateRange","startDate","endDate","dateArray","Array","currentDate","Date","push","toLocaleDateString","setDate","getDate","isToday","date","moment","isSame","isFuture","isAfter","IssuePart","actualPart","totalParts","this","uuid","CalendarDataCreator","users","issues","data","dates","addDates","addUsers","addIssues","create","length","createCell","READONLY","displayName","issuesMap","Map","issueParts","dueDate","all","startDateIndex","findIndex","dueDateIndex","dateCells","slice","userCell","assignee","Error","forEach","dateCell","idx","get","set","DRAG_AND_DROP","rowCount","columnCount","start","end","Math","trunc","duration","diff","asDays","getNumberOfDays","i","j","emptyCell","addCell","dataViewer","DataViewer","axiosInstance","Axios","baseURL","interceptors","request","use","config","parent","token","JIRA_BROWSE_URL","Issue","project","creator","created","DataService","defaultQuery","startOf","toDate","endOf","query","issue1","name","accountId","accountType","isActive","issue2","result","calendarData","userUrl","issuesUrl","userName","issuesQuery","format","endsWith","Promise","fetchDataAction","a","async","fetchDataRequested","dataService","loadData","fetchDataSuccess","fetchDataFailure","type","payload","error","reorderAction","pos","sourIndex","destIndex","list","startIndex","endIndex","from","splice","removed","reorder","moveAction","sourPos","destPos","sourceList","destinationList","source","destination","droppableSource","droppableDestination","sourceClone","destClone","move","sourData","destData","multiDragItem","JiraPlanningCalendarFilter","props","getFilterItemStyle","flex","alignSelf","filterHandler","Form","onSubmit","formProps","submitting","dirty","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","defaultValue","fieldProps","valid","DatePicker","Textfield","Button","appearance","isDisabled","hideElements","elements","el","visibility","JiraPlanningCalendar","useEffect","isLoading","document","querySelectorAll","body","addEventListener","getList","position","handleSimpleDrag","cellPos","parse","positon","sourCellPos","destCellPos","destinationPosition","handleMultiDrag","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","user","active","spinner","color","styles","overlay","base","onDragStart","onDragEnd","whiteSpace","Boolean","location","hostname","match","initialState","errors","rootReducer","action","Object","assign","reorderResult","sourCell","destCell","moveResult","singleDestinationMultiDragResult","destRow","destCol","destinationCell","sourceCell","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2ea3ef7.chunk.js","sourcesContent":["export enum CellType {\r\n   READONLY, DROPPABLE, DRAGGABLE, DRAG_AND_DROP\r\n}","import React from 'react';\r\nimport { Droppable, Draggable, DraggableStateSnapshot } from 'react-beautiful-dnd';\r\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectAction } from './../actions';\r\nimport { MultiDragItem } from '../model/cell/multi-drag-item';\r\nimport { State } from '../state';\r\nimport { IssuePart } from './../domain/issue/issue-part';\r\nimport { Position } from '../../shared/position';\r\nimport { CellType } from '../model/cell/cell-type';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const dispatch = useDispatch();\r\n   const state = useSelector((state: State) => state);\r\n\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const droppableId = JSON.stringify({ row, col });\r\n   const cellId = cell.id;\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle, isSelected) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : 'white',\r\n      borderStyle: isSelected ? 'dotted' : 'none',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleOpenIssue = (issueUrl: string) => {\r\n      console.log(issueUrl)\r\n      window.open(issueUrl, '_blank');\r\n   }\r\n\r\n   const handleClickForMultiDrag = (event: MouseEvent, issuePart: IssuePart) => {\r\n      if (event.defaultPrevented) {\r\n         return;\r\n      }\r\n\r\n      if (event.button !== 0) {\r\n         return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      toggleSelection(getMultiDragItem(issuePart));\r\n   }\r\n\r\n   const toggleSelection = (item: MultiDragItem) => {\r\n      if (!isSelected(item)) {\r\n         dispatch(selectAction(item));\r\n      }\r\n   }\r\n\r\n   const isSelected = (item: MultiDragItem): boolean => {\r\n      return state.selectedItems.find(x => x.draggableId === item.draggableId);\r\n   }\r\n\r\n   const getMultiDragItem = (issuePart: IssuePart): MultiDragItem => {\r\n      return {\r\n         cellId: cellId,\r\n         draggableId: issuePart.id,\r\n         sourcePosition: {\r\n            row: row,\r\n            col: col\r\n         } as Position,\r\n         value: issuePart\r\n      }\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={droppableId}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item: IssuePart, index: number) => (\r\n                  <Draggable\r\n                     key={item.id}\r\n                     draggableId={item.id}\r\n                     index={index}\r\n                     isDragDisabled={cell.cellType === CellType.DRAGGABLE}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style,\r\n                              isSelected(getMultiDragItem(item))\r\n                           )}>\r\n                           <div {...provided.dragHandleProps}\r\n                              style={getListItemIconStyle()}\r\n                              onClick={(event: MouseEvent) => handleClickForMultiDrag(event, item)}\r\n                           >\r\n                              <DragHandlerIcon label='drag-handle' />\r\n                           </div>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item.issue.key}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item.issue.url)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import moment from \"moment\";\r\n\r\nexport const  getDateRange = (startDate: Date, endDate: Date): Array<string> => {\r\n   var dateArray = new Array<string>();\r\n   var currentDate = new Date(startDate);\r\n\r\n   while (currentDate <= endDate) {\r\n     dateArray.push(new Date(currentDate).toLocaleDateString());\r\n     currentDate.setDate(currentDate.getDate() + 1);\r\n   }\r\n   return dateArray;\r\n }\r\n\r\n export const getNumberOfDays = (startDate: Date, endDate: Date): number => {\r\n   const start = moment(startDate.setDate(startDate.getDate() - 1));\r\n   const end = moment(endDate);\r\n   return Math.trunc(moment.duration(end.diff(start)).asDays());\r\n }\r\n\r\n export const isPast = (date: Date): boolean => {\r\n  return moment(date).isBefore(moment(), 'day');\r\n }\r\n\r\n export const isToday = (date: Date): boolean => {\r\n  return moment(date).isSame(moment(), 'day');\r\n }\r\n\r\n export const isFuture = (date: Date): boolean => {\r\n  return moment(date).isAfter(moment(), 'day');\r\n }\r\n\r\n export const isTodayOrFuture = (date: Date): boolean => {\r\n  return isToday(date) || isFuture(date);\r\n }","import { Issue } from \"./issue\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport class IssuePart {\r\n   id: string;\r\n   issue: Issue;\r\n   actualPart: number;\r\n   totalParts: number;\r\n\r\n   get isStart(): boolean {\r\n      return this.actualPart === 0;\r\n   }\r\n\r\n   get isEnd(): boolean {\r\n      return this.actualPart === this.totalParts - 1;\r\n   }\r\n\r\n   get isSinglePart(): boolean {\r\n      return this.totalParts === 1;\r\n   }\r\n\r\n   constructor(issue: Issue, actualPart: number, totalParts: number) {\r\n      this.id = uuid();\r\n      this.issue = issue;\r\n      this.actualPart = actualPart;\r\n      this.totalParts = totalParts;      \r\n   }\r\n   \r\n}","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport {\r\n  getNumberOfDays,\r\n  getDateRange,\r\n  isTodayOrFuture,\r\n  isFuture\r\n} from \"../shared/date-helper\";\r\nimport { IssuePart } from \"./domain/issue/issue-part\";\r\nimport { CellType } from \"./model/cell/cell-type\";\r\nimport { isToday, isPast } from \"./../shared/date-helper\";\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.addDates();\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(): void {\r\n    const dates = getDateRange(\r\n      new Date(this.startDate),\r\n      new Date(this.endDate)\r\n    );\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(0, index + 1, dates[index], CellType.READONLY);\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(\r\n        index + 1,\r\n        0,\r\n        users[index].displayName,\r\n        CellType.READONLY\r\n      );\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    const issuesMap = new Map<string, Array<IssuePart>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n\r\n      const issueParts = getDateRange(issue.startDate, issue.dueDate).map(\r\n        (date, index, all) => {\r\n          return new IssuePart(issue, index, all.length);\r\n        }\r\n      );\r\n\r\n      const startDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.startDate.toLocaleDateString()\r\n      );\r\n\r\n      let dueDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.dueDate.toLocaleDateString()\r\n      );\r\n\r\n      if (dueDateIndex !== -1) {\r\n        dueDateIndex = dueDateIndex + 1;\r\n      }\r\n\r\n      const dateCells = this.dates.slice(startDateIndex, dueDateIndex);\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (!userCell) {\r\n        throw new Error(\r\n          \"No users were found. Without users, issues cannot be displayed\"\r\n        );\r\n      }\r\n\r\n      dateCells.forEach((dateCell, idx) => {\r\n        let col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issueParts[idx]);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n\r\n        let cellType: CellType;\r\n\r\n        const date = dateCell.value;\r\n\r\n        if (isToday(date)) {\r\n          cellType = CellType.DRAG_AND_DROP;\r\n        } else if (isFuture(date)) {\r\n          cellType = CellType.DRAGGABLE;\r\n        } else {\r\n          cellType = CellType.READONLY;\r\n        }\r\n\r\n        this.issues.push(\r\n          this.createCell(row, col, data, cellType, ListDataViewer)\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    const rowCount = this.users.length + 1;\r\n    const columnCount = getNumberOfDays(this.startDate, this.endDate) + 1;\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const emptyCell = this.createCell(\r\n          i,\r\n          j,\r\n          [],\r\n          CellType.READONLY\r\n        );\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n\r\n    // dates\r\n    this.dates.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // users\r\n    this.users.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // issues\r\n    this.issues.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n  }\r\n\r\n  private createCell(\r\n    row: number,\r\n    col: number,\r\n    value: any,\r\n    cellType: CellType,\r\n    dataViewer?: any,\r\n  ): Cell {\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      value: value,\r\n      DataViewer: dataViewer,\r\n      cellType: cellType\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import { Project } from \"../project/project\";\r\nimport { User } from \"../user/user\";\r\nimport { JIRA_BROWSE_URL } from \"../../../../jira\";\r\n\r\nexport class Issue {\r\n  key: string;\r\n  project: Project;\r\n  assignee: User;\r\n  creator: User;\r\n  created: Date;\r\n  startDate: Date;\r\n  dueDate: Date;\r\n  url: string;\r\n\r\n  constructor(key: string, project: Project, assignee: User, creator: User, created: Date, startDate: Date, dueDate: Date) {\r\n    this.key = key;\r\n    this.project = project;\r\n    this.assignee = assignee;\r\n    this.creator = creator;\r\n    this.created = created;\r\n    this.startDate = startDate;\r\n    this.dueDate = dueDate;\r\n    this.url = `${JIRA_BROWSE_URL}${key}`;\r\n  }\r\n}\r\n","import { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport { Project } from \"./domain/project/project\";\r\nimport { State } from \"./state\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    // const data = await this.getData(query);\r\n    // const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    // const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n\r\n    const users = [\r\n      {\r\n        displayName: \"Adam Blasko\",\r\n        accountId: \"0\",\r\n        accountType: \"atlassian\",\r\n        isActive: true\r\n      } as User,\r\n      {\r\n        displayName: \"Ben Kusicky\",\r\n        accountId: \"1\",\r\n        accountType: \"atlassian\",\r\n        isActive: true\r\n      } as User,\r\n    ];\r\n\r\n    const project = {\r\n      key: \"JPC\",\r\n      name: \"Jira planning calendar\"\r\n    } as Project;\r\n\r\n    const issue1 = new Issue(\"XAM-5147\", project , users[0], users[0], new Date(), new Date(), new Date(new Date().setDate(new Date().getDate() + 2)));\r\n    const issue2 = new Issue(\"XAM-5777\", project , users[1], users[1], new Date(), new Date(), new Date(new Date().setDate(new Date().getDate() + 1)));\r\n\r\n    const result = new CalendarDataCreator(\r\n      users,\r\n      [issue1, issue2],\r\n      query.startDate,\r\n      query.endDate\r\n    ).calendarData;\r\n\r\n    return result;\r\n  }\r\n\r\n  private getData(query?: Query) {\r\n    let userUrl = \"/users\";\r\n    let issuesUrl = \"/issues\";\r\n\r\n    if (query) {\r\n      if (query.userName) {\r\n        userUrl = `${userUrl}/${query.userName}`;\r\n      }\r\n\r\n      var issuesQuery = \"\";\r\n      if (query.issue) {\r\n        issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n      }\r\n\r\n      var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n      var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n      if (issuesQuery.endsWith(\"&\")) {\r\n        issuesQuery = issuesQuery.slice(0, -1);\r\n      }\r\n\r\n      issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n    }\r\n\r\n    return Promise.all([\r\n      axiosInstance.get(userUrl),\r\n      axiosInstance.get(issuesUrl)\r\n    ]);\r\n  }\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE,\r\n  SELECT,\r\n  UNSELECT_ALL,\r\n  MULTI_DRAG_SINGLE_DESTINATION\r\n} from \"./action-types\";\r\nimport { DataService, Query } from \"./data-service\";\r\nimport { MultiDragItem } from \"./model/cell/multi-drag-item\";\r\nimport { reorder, move } from \"../shared/drag-and-drop-utils\";\r\nimport { Position } from '../shared/position';\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure([error]));\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n};\r\n\r\nexport const fetchDataSuccess = result => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n};\r\n\r\nexport const fetchDataFailure = error => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n};\r\n\r\nexport const reorderAction = (\r\n  pos: Position,\r\n  sourIndex: number,\r\n  destIndex: number,\r\n  list: Array<any>\r\n) => {\r\n  const data = reorder(list, sourIndex, destIndex);\r\n  return {\r\n    type: REORDER,\r\n    payload: {\r\n      pos,\r\n      data\r\n    }\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  sourPos: Position,\r\n  destPos: Position,\r\n  sourceList: Array<any>,\r\n  destinationList: Array<any>,\r\n  source,\r\n  destination\r\n) => {\r\n  const result = move(sourceList, destinationList, source, destination);\r\n  const sourData = result[source.droppableId];\r\n  const destData = result[destination.droppableId];\r\n  return {\r\n    type: MOVE,\r\n    payload: {\r\n      sourPos,\r\n      sourData,\r\n      destPos,\r\n      destData\r\n    }\r\n  };\r\n};\r\n\r\nexport const selectAction = (multiDragItem: MultiDragItem) => {\r\n  return {\r\n    type: SELECT,\r\n    payload: {\r\n      multiDragItem\r\n    }\r\n  };\r\n};\r\n\r\nexport const unselectAllAction = () => {\r\n  return {\r\n    type: UNSELECT_ALL\r\n  };\r\n};\r\n\r\nexport const singleDestinationMultiDragAndDropAction = (\r\n  sourPos: Array<Position>,\r\n  destPos: Position\r\n) => {\r\n  return {\r\n    type: MULTI_DRAG_SINGLE_DESTINATION,\r\n    payload: {\r\n      sourPos,\r\n      destPos\r\n    }\r\n  };\r\n};\r\n","export const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\r\nexport const SELECT = 'SELECT';\r\nexport const UNSELECT_ALL = 'UNSELECT_ALL';\r\nexport const MULTI_DRAG_SINGLE_DESTINATION = 'MULTI_DRAG_SINGLE_DESTINATION';","export const reorder = (\r\n  list: Array<any>,\r\n  startIndex: number,\r\n  endIndex: number\r\n) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nexport const move = (\r\n  source: Array<any>,\r\n  destination: Array<any>,\r\n  droppableSource,\r\n  droppableDestination\r\n) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n}\r\n\r\n\r\n\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between',\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","export const hideElements = (elements) => elements.forEach(el => {\r\n   el.style.visibility = 'hidden';\r\n });","import React, { useEffect } from 'react';\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { fetchDataAction, reorderAction, moveAction, unselectAllAction, singleDestinationMultiDragAndDropAction } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { Query } from '../data-service';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport BounceLoader from 'react-spinners/BounceLoader'\r\nimport { State } from './../state';\r\nimport { Position } from '../../shared/position';\r\n\r\nconst JiraPlanningCalendar = () => {\r\n  const state = useSelector((state: State) => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const filterHandler = async (data) => {\r\n    const query: Query = {\r\n      userName: data.user,\r\n      issue: data.issue,\r\n      startDate: new Date(data.startDate),\r\n      endDate: new Date(data.endDate)\r\n    }\r\n\r\n    dispatch(fetchDataAction(query));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.isLoading) {\r\n      hideElements(document.querySelectorAll('.FloatingRect'));\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', () => {\r\n      hideElements(document.querySelectorAll('.ActiveCell'))\r\n\r\n    }, true);\r\n  }, [state.isLoading])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDataAction());\r\n  }, []);\r\n\r\n  const getList = (position: Position) => {\r\n    return state.data[position.row][position.col].value;\r\n  }\r\n\r\n  const onDragStart = (result: any) => {\r\n    if (!state.selectedItems.find(x => x.draggableId === result.draggableId)) {\r\n      dispatch(unselectAllAction());\r\n    }\r\n  }\r\n\r\n  const onDragEnd = (result: any) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (state.selectedItems.length > 0) {\r\n      handleMultiDrag(source, destination);\r\n    } else {\r\n      handleSimpleDrag(source, destination);\r\n    }\r\n  }\r\n\r\n  const handleSimpleDrag = (source, destination) => {\r\n    if (source.droppableId === destination.droppableId) {\r\n      const cellPos = JSON.parse(source.droppableId);\r\n      const positon = {\r\n        row: cellPos.row,\r\n        col: cellPos.col\r\n      } as Position;\r\n\r\n      dispatch(\r\n        reorderAction(positon, source.index, destination.index, getList(positon))\r\n      );\r\n    } else {\r\n      const sourCellPos = JSON.parse(source.droppableId);\r\n      const destCellPos = JSON.parse(destination.droppableId);\r\n\r\n      const sourcePosition = {\r\n        row: sourCellPos.row,\r\n        col: sourCellPos.col\r\n      } as Position;\r\n\r\n      const destinationPosition = {\r\n        row: destCellPos.row,\r\n        col: destCellPos.col\r\n      } as Position;\r\n\r\n      dispatch(\r\n        moveAction(sourcePosition, destinationPosition, getList(sourcePosition), getList(destinationPosition), source, destination)\r\n      );\r\n    }\r\n  }\r\n\r\n  const handleMultiDrag = (source, destination) => {\r\n    const sourCellPos = JSON.parse(source.droppableId);\r\n    const destCellPos = JSON.parse(destination.droppableId);\r\n\r\n    const sourcePosition = {\r\n      row: sourCellPos.row,\r\n      col: sourCellPos.col\r\n    } as Position;\r\n\r\n    const destinationPosition = {\r\n      row: destCellPos.row,\r\n      col: destCellPos.col\r\n    } as Position;\r\n\r\n    dispatch(singleDestinationMultiDragAndDropAction([sourcePosition], destinationPosition));\r\n  }\r\n\r\n  const getContainerStyle = () => ({\r\n    paddingTop: '1%',\r\n    paddingBottom: '1%',\r\n    paddingLeft: '1.5%',\r\n    paddingRight: '1.5%',\r\n    backgroundColor: 'white',\r\n  } as React.CSSProperties)\r\n\r\n  const getCalendarContainerStyle = () => ({\r\n    marginTop: '1%'\r\n  } as React.CSSProperties)\r\n\r\n  const getSpreadSheetStyle = () => ({\r\n    '.Spreadsheet td': {\r\n      whiteSpace: 'pre'\r\n    }\r\n  } as React.CSSProperties)\r\n\r\n  return (\r\n    <div style={getContainerStyle()}>\r\n      <div>\r\n        <JiraPlanningCalendarFilter\r\n          filterHandler={filterHandler}\r\n        />\r\n      </div>\r\n      <LoadingOverlay\r\n        active={state.isLoading}\r\n        spinner={<BounceLoader color='#0052CC' />}\r\n        styles={{\r\n          overlay: (base) => ({\r\n            ...base,\r\n            background: '#D9FFFFFF'\r\n          }),\r\n        }}>\r\n        <div style={getCalendarContainerStyle()}>\r\n          <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>\r\n            <Spreadsheet style={getSpreadSheetStyle()} data={state.data} />\r\n          </DragDropContext>\r\n        </div>\r\n      </LoadingOverlay>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE,\r\n  SELECT,\r\n  UNSELECT_ALL,\r\n  MULTI_DRAG_SINGLE_DESTINATION\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: [],\r\n  selectedItems: [],\r\n  errors: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const cell: Cell = Object.assign({}, state.data[action.payload.pos.row][action.payload.pos.col]);\r\n      cell.value = action.payload.data;\r\n\r\n      const reorderResult: Array<Array<Cell>> = [...state.data];\r\n      reorderResult[action.payload.pos.row][action.payload.pos.col] = cell;\r\n      return {\r\n        isLoading: false,\r\n        data: reorderResult,\r\n        selectedItems: [],\r\n        errors: []\r\n      } as State;\r\n    case MOVE:\r\n      const sourCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.sourPos.row][action.payload.sourPos.col]\r\n      );\r\n      sourCell.value = action.payload.sourData;\r\n      const destCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.destPos.row][action.payload.destPos.col]\r\n      );\r\n      destCell.value = action.payload.destData;\r\n\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      moveResult[action.payload.sourPos.row][action.payload.sourPos.col] = sourCell;\r\n      moveResult[action.payload.destPos.row][action.payload.destPos.col] = destCell;\r\n\r\n      return {\r\n        isLoading: false,\r\n        data: moveResult,\r\n        selectedItems: [],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_REQUEST:\r\n      return {\r\n        isLoading: true,\r\n        data: [...state.data],\r\n        selectedItems: [],\r\n        errors: []       \r\n      } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload],\r\n        selectedItems: [],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n      return {\r\n        isLoading: false,\r\n        data: [],\r\n        selectedItems: [],\r\n        errors: [...action.payload]\r\n      } as State;\r\n    case SELECT:      \r\n      return {\r\n        isLoading: false,\r\n        data: [...state.data],\r\n        selectedItems: [...state.selectedItems, action.payload.multiDragItem],\r\n        errors: []\r\n      } as State;\r\n      case UNSELECT_ALL:\r\n        return {\r\n          isLoading: false,\r\n          data: [...state.data],\r\n          selectedItems: [],\r\n          errors: []\r\n        } as State;\r\n      case MULTI_DRAG_SINGLE_DESTINATION:\r\n        const singleDestinationMultiDragResult = [...state.data];\r\n        const destRow = action.payload.destPos.row;\r\n        const destCol = action.payload.destPos.col;\r\n        const destinationCell: Cell = Object.assign({}, singleDestinationMultiDragResult[destRow][destCol]);\r\n\r\n        state.selectedItems.forEach(item => {\r\n          const sourceCell: Cell = Object.assign({}, singleDestinationMultiDragResult[item.sourcePosition.row][item.sourcePosition.col]);\r\n          sourceCell.value = sourceCell.value.filter(x => x !== item.value);\r\n          destinationCell.value.push(item.value);\r\n          singleDestinationMultiDragResult[item.sourcePosition.row][item.sourcePosition.col] = sourceCell;\r\n        });\r\n\r\n        singleDestinationMultiDragResult[destRow][destCol] = destinationCell;\r\n\r\n        return {\r\n          isLoading: false,\r\n          data: singleDestinationMultiDragResult,\r\n          selectedItems: [],\r\n          errors: []\r\n        } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
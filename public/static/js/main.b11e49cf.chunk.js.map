{"version":3,"sources":["modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","modules/shared/elements.ts","jira.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/jira-planning-calendar/components/ReadOnlyDataViewer.tsx","modules/jira-planning-calendar/data-creator.ts","axios.ts","token.js","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/components/LoadingComponent.tsx","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","data","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","name","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","Date","project","console","log","hideElements","elements","classToAdd","el","classList","add","JIRA_BROWSE_URL","ListDataViewer","cell","row","col","id","JSON","stringify","handleDragAndDrop","event","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","type","document","querySelectorAll","droppableId","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","value","map","item","index","draggableId","onMouseDown","onMouseUp","onMouseOver","onMouseMove","draggableProps","isDragging","draggableStyle","display","userSelect","marginTop","marginBottom","dragHandleProps","width","height","label","marginLeft","marginRight","onClick","window","open","handleOpenIssue","cursor","placeholder","ReadOnlyDataViewer","CalendarDataCreator","users","issues","startDate","endDate","dates","this","addDates","addUsers","addIssues","create","generateDates","length","createCell","issuesMap","Map","issue","dateCell","find","x","toLocaleDateString","userCell","get","set","start","moment","setDate","getDate","end","rowCount","columnCount","Math","trunc","duration","diff","asDays","i","j","emptyCell","addCell","dataViewer","DataViewer","dateArray","currentDate","axiosInstance","Axios","baseURL","interceptors","request","use","config","url","parent","token","DataService","defaultQuery","startOf","toDate","endOf","query","getData","parseArrayFromJson","calendarData","userUrl","issuesUrl","userName","issuesQuery","format","endsWith","slice","Promise","all","fetchDataAction","dispatch","a","async","fetchDataRequested","dataService","loadData","fetchDataSuccess","fetchDataFailure","payload","error","JiraPlanningCalendarFilter","props","getFilterItemStyle","pos","flex","alignSelf","filterHandler","Form","onSubmit","formProps","submitting","dirty","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","defaultValue","fieldProps","valid","DatePicker","Textfield","Button","appearance","isDisabled","LoadingComponent","className","JiraPlanningCalendar","state","useSelector","useDispatch","useEffect","getList","isLoading","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","onDragEnd","source","destination","cellPosition","parse","list","startIndex","endIndex","from","splice","removed","reorder","reorderAction","sourceCellPosition","destinationCellPosition","sourceRow","sourceCol","destinationRow","destinationCol","droppableSource","droppableDestination","sourceClone","destClone","move","sourRow","sourCol","sourData","destRow","destCol","destData","whiteSpace","Boolean","location","hostname","match","initialState","rootReducer","action","Object","assign","reorderResult","sourCell","destCell","moveResult","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b11e49cf.chunk.js","sourcesContent":["import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n      console.log(this.fromJson(element))\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","export const hideElements = (elements, classToAdd: string = 'hidden', classToRemove: string = 'selected') => elements.forEach(el => {\r\n   el.classList.add(classToAdd);\r\n });","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import React from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { hideElements } from '../../shared/elements';\r\nimport { JIRA_BROWSE_URL } from '../../../jira';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const id = JSON.stringify({ row, col });\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : 'white',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleDragAndDrop = (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      event.nativeEvent.stopImmediatePropagation();\r\n\r\n      if (event.type === 'mousedown') {\r\n         hideElements(document.querySelectorAll('.ActiveCell'));\r\n      }\r\n   }\r\n\r\n   const handleOpenIssue = (item) => {\r\n      window.open(`${JIRA_BROWSE_URL}${item}`, '_blank');\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={id}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item, index) => (\r\n                  <Draggable\r\n                     key={item}\r\n                     draggableId={item}\r\n                     index={index}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           onMouseDown={event => handleDragAndDrop(event)}\r\n                           onMouseUp={event => handleDragAndDrop(event)}\r\n                           onMouseOver={event => handleDragAndDrop(event)}\r\n                           onMouseMove={event => handleDragAndDrop(event)}\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                           )}>\r\n                           <div {...provided.dragHandleProps} style={getListItemIconStyle()}>\r\n                              <DragHandlerIcon label='drag-handle' />\r\n                           </div>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open-icon' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import React from 'react';\r\n\r\nconst ReadOnlyDataViewer = ({ cell }) => {\r\n\r\n   return (\r\n      <div onMouseDown={event => event.stopPropagation()} onMouseOver={event => event.stopPropagation()} >\r\n         {cell.value}\r\n      </div>)\r\n}\r\n\r\nexport default ReadOnlyDataViewer;\r\n","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/Issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport moment from \"moment\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport ReadOnlyDataViewer from \"./components/ReadOnlyDataViewer\";\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.addDates();\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(): void {\r\n    const dates = this.generateDates(new Date(this.startDate), new Date(this.endDate));\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(index + 1, 0, dates[index], ReadOnlyDataViewer);\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    const issuesMap = new Map<string, Array<string>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n\r\n      const dateCell = this.dates.find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issue.key);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n        const cell = this.createCell(col, row, data, ListDataViewer);\r\n        this.issues.push(cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    const start = moment(this.startDate.setDate(this.startDate.getDate() - 1));\r\n    const end = moment(this.endDate);\r\n\r\n    const rowCount = this.users.length + 1;\r\n    const columnCount = Math.trunc(moment.duration(end.diff(start)).asDays()) + 1;\r\n\r\n    console.log(this.startDate);\r\n    console.log(this.endDate);\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const emptyCell = this.createCell(j, i, [], ListDataViewer);\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n\r\n    // dates\r\n    this.dates.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // users\r\n    this.users.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // issues\r\n    this.issues.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n  }\r\n\r\n  private createCell(\r\n    col: number,\r\n    row: number,\r\n    value: any,\r\n    dataViewer?: any\r\n  ): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value,\r\n      DataViewer: dataViewer\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    const data = await this.getData(query);\r\n\r\n    const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    \r\n    const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n\r\n    const result = new CalendarDataCreator(users, issues, query.startDate, query.endDate).calendarData;\r\n\r\n    // const result = [\r\n    //   [\r\n    //     {\r\n    //       row: 0,\r\n    //       col: 0,\r\n    //       value: [\"Raspberry\", \"Apple\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     },\r\n    //     {\r\n    //       row: 0,\r\n    //       col: 1,\r\n    //       value: [\"Paprika\", \"Onion\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     }\r\n    //   ],\r\n    //   [\r\n    //     {\r\n    //       row: 1,\r\n    //       col: 0,\r\n    //       value: [\"Cola\", \"Fanta\", \"Sprite\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     }\r\n    //   ]\r\n    // ];\r\n    return result;\r\n  }\r\n\r\n  private getData(query?: Query) {\r\n    let userUrl = \"/users\";\r\n    let issuesUrl = \"/issues\";\r\n\r\n    if (query) {\r\n      if (query.userName) {\r\n        userUrl = `${userUrl}/${query.userName}`;\r\n      }\r\n\r\n      var issuesQuery = \"\";\r\n      if (query.issue) {\r\n        issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n      }\r\n\r\n      var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n      var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n      if (issuesQuery.endsWith(\"&\")) {\r\n        issuesQuery = issuesQuery.slice(0, -1);\r\n      }\r\n\r\n      issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n    }\r\n\r\n    return Promise.all([\r\n      axiosInstance.get(userUrl),\r\n      axiosInstance.get(issuesUrl)\r\n    ]);\r\n  }\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import { REORDER, MOVE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from \"./action-types\";\r\nimport { DataService, Query } from './data-service';\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch(error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure(error))\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n}\r\n\r\nexport const fetchDataSuccess = (result) => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n}\r\n\r\nexport const fetchDataFailure = (error) => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n}\r\n\r\nexport const reorderAction = (row: number, col: number, data: Array<any>) => {\r\n  return {\r\n    type: REORDER,\r\n    row,\r\n    col,\r\n    data\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  sourRow: number,\r\n  sourCol: number,\r\n  sourData: Array<any>,\r\n  destRow: number,\r\n  destCol: number,\r\n  destData: Array<any>\r\n) => {\r\n  return {\r\n    type: MOVE,\r\n    sourRow,\r\n    sourCol,\r\n    sourData,\r\n    destRow,\r\n    destCol,\r\n    destData\r\n  };\r\n};\r\n","export const FETCH_DATA = 'FETCH_DATA';\r\nexport const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between'\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","import React from 'react';\r\nimport './LoadingComponents.css';\r\n\r\nconst LoadingComponent = () => {\r\n   return (\r\n      <div className='lds-roller'>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default LoadingComponent;","import React, { useEffect } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchDataAction, reorderAction, moveAction } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { hideElements } from '../../shared/elements';\nimport { Query } from '../data-service';\nimport LoadingComponent from '../../shared/components/LoadingComponent';\n\nconst JiraPlanningCalendar = () => {\n  const state = useSelector(state => state);\n\n  const dispatch = useDispatch();\n\n  const filterHandler = async (data) => {\n    const query: Query = {\n      userName: data.user,\n      issue: data.issue,\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate)\n    }\n\n    dispatch(fetchDataAction(query));\n  }\n\n  useEffect(() => {\n    const load = async () => {\n      dispatch(fetchDataAction());\n    }\n    load();\n  }, []);\n\n  const reorder = (list: Array<any>, startIndex: number, endIndex: number) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }\n\n  const move = (source: Array<any>, destination: Array<any>, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  }\n\n  const getList = (row: number, col: number) => {\n    return state.data[row][col].value;\n  }\n\n  const onDragEnd = (result: any) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const cellPosition = JSON.parse(source.droppableId);\n      const row = cellPosition.row;\n      const col = cellPosition.col;\n\n      const result = reorder(getList(row, col), source.index, destination.index);\n\n      dispatch(reorderAction(row, col, result));\n    } else {\n      const sourceCellPosition = JSON.parse(source.droppableId);\n      const destinationCellPosition = JSON.parse(destination.droppableId);\n      const sourceRow = sourceCellPosition.row;\n      const sourceCol = sourceCellPosition.col;\n      const destinationRow = destinationCellPosition.row;\n      const destinationCol = destinationCellPosition.col;\n\n      const result = move(getList(sourceRow, sourceCol), getList(destinationRow, destinationCol), source, destination);\n      dispatch(moveAction(sourceRow, sourceCol, result[source.droppableId], destinationRow, destinationCol, result[destination.droppableId]));\n    }\n\n    hideElements(document.querySelectorAll('.FloatingRect'))\n  }\n\n  const getContainerStyle = () => ({\n    paddingTop: '1%',\n    paddingBottom: '1%',\n    paddingLeft: '1.5%',\n    paddingRight: '1.5%',\n    backgroundColor: 'white',\n  } as React.CSSProperties)\n\n  const getCalendarContainerStyle = () => ({\n    marginTop: '1%'\n  } as React.CSSProperties)\n\n  const getSpreadSheetStyle = () => ({\n    '.Spreadsheet td': {\n      whiteSpace: 'pre'\n    }\n  } as React.CSSProperties)\n\n  if (state.isLoading) {\n    return (\n      <LoadingComponent />\n    )\n  }\n\n  return (\n    <div style={getContainerStyle()}>\n      <div>\n        <JiraPlanningCalendarFilter\n          filterHandler={filterHandler}\n        />\n      </div>\n      <div style={getCalendarContainerStyle()}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Spreadsheet style={getSpreadSheetStyle} data={state.data} />\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  FETCH_DATA,\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const cell: Cell = Object.assign({}, state.data[action.row][action.col]);\r\n      cell.value = action.data;\r\n\r\n      const reorderResult: Array<Array<Cell>> = [...state.data];\r\n      reorderResult[action.row][action.col] = cell;\r\n\r\n      return {\r\n        data: reorderResult\r\n      };\r\n    case MOVE:\r\n      const sourCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.sourRow][action.sourCol]\r\n      );\r\n      sourCell.value = action.sourData;\r\n      const destCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.destRow][action.destCol]\r\n      );\r\n      destCell.value = action.destData;\r\n\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      moveResult[action.sourRow][action.sourCol] = sourCell;\r\n      moveResult[action.destRow][action.destCol] = destCell;\r\n\r\n      return {\r\n        data: moveResult\r\n      };\r\n    case FETCH_DATA_REQUEST:\r\n        return {\r\n          isLoading: true,\r\n          data: []\r\n        } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload]\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n        return {\r\n          isLoading: false,\r\n          data: [],\r\n          error: Object.assign({}, action.payload)\r\n        } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
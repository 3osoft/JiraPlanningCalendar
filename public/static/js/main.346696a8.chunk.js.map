{"version":3,"sources":["modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/filter/JiraPlanningCalendarFilter.tsx","axios.ts","modules/jira-planning-calendar/data-loader.ts","token.js","modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","modules/jira-planning-calendar/data-builder.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","modules/jira-planning-calendar/actions.ts","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["FETCH_DATA","JiraPlanningCalendarFilter","Form","onSubmit","data","props","filterHandler","formProps","submitting","dirty","className","Field","label","name","defaultValue","Date","toLocaleDateString","fieldProps","error","valid","DatePicker","Textfield","Button","type","appearance","isDisabled","React","Component","axiosInstance","Axios","create","baseURL","getData","query","userUrl","issuesUrl","userName","issue","Promise","all","get","interceptors","request","use","config","url","window","parent","token","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","project","SheetDataBuilder","rowCount","columnCount","startDate","setDate","getDate","endDate","this","initData","users","index","length","cell","createCell","addCell","issues","userCells","map","x","dateCell","find","value","userCell","newValue","col","row","existingCell","dates","generateDates","i","j","dateArray","currentDate","DataService","parseArrayFromJson","addUsers","addIssues","build","JiraPlanningCalendar","dataService","a","async","loadData","fetchData","then","connect","state","dispatch","Boolean","location","hostname","match","initialState","sheetReducer","action","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.346696a8.chunk.js","sourcesContent":["export const FETCH_DATA = \"FETCH_DATA\";\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport './JiraPlanningCalendarFilter.css'\r\n\r\nclass JiraPlanningCalendarFilter extends React.Component<{ filterHandler: (data) => void }, {}> {\r\n\r\n   render() {\r\n      return (\r\n         <Form onSubmit={data => this.props.filterHandler(data)}>\r\n            {({ formProps, dirty, submitting }) => (\r\n               <form {...formProps}>\r\n                  <div className=\"filter-container\">\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Start date\" name=\"startDate\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"End date\" name=\"endDate\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"User\" name=\"user\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Issue\" name=\"issue\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"submit-button\">\r\n                        <Button\r\n                           type=\"submit\"\r\n                           appearance=\"primary\"\r\n                           isDisabled={submitting}>\r\n                           Submit\r\n                        </Button>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            )}\r\n         </Form>\r\n      )\r\n   }\r\n}\r\n\r\nexport default JiraPlanningCalendarFilter;\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","import { axiosInstance } from '../../axios';\r\n\r\nexport function getData(query?: Query) {\r\n  let userUrl = '/users';\r\n  let issuesUrl = '/issues';\r\n\r\n  if (query) {\r\n    if (query.userName) {\r\n      userUrl = `${userUrl}/${query.userName}`;\r\n    }\r\n\r\n    if (query.issue) {\r\n      issuesUrl = `${issuesUrl}/${query.issue}`;\r\n    }\r\n  }\r\n  return Promise.all([axiosInstance.get(userUrl), axiosInstance.get(issuesUrl)]);\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n}\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Cell } from \"./domain/cell/cell\";\r\nimport { Issue } from \"./domain/issue/Issue\";\r\nimport { User } from \"./domain/user/user\";\r\n\r\nexport class SheetDataBuilder {\r\n  private rowCount: number;\r\n  private columnCount: number;\r\n  private data = new Array<Array<Cell>>();\r\n  private startDate = new Date(new Date().setDate(new Date().getDate() - 1));\r\n  private endDate = new Date(new Date().setDate(new Date().getDate() + 100));\r\n\r\n  constructor(rowCount: number, columnCount) {\r\n    this.rowCount = rowCount;\r\n    this.columnCount = columnCount;\r\n    this.initData();\r\n  }\r\n\r\n  addUsers(users: Array<User>): SheetDataBuilder {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.addCell(cell);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addIssues(issues: Array<Issue>): SheetDataBuilder {\r\n    const userCells = this.data.map(x => x[0]);\r\n        \r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n      const dateCell = this.data[0].find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n      \r\n      const userCell = userCells.find(x => x.value === issue.assignee.displayName);\r\n\r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n        const existingCell = this.data[row][col];\r\n\r\n        let newValue;\r\n        if (existingCell.value) {\r\n          newValue = `${existingCell.value}\\n${issue.key}`;\r\n        } else {\r\n          newValue = issue.key\r\n        }\r\n\r\n        const cell = this.createCell(col, row, newValue);\r\n        this.addCell(cell);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  build(): Array<Array<Cell>> {\r\n    return this.data;\r\n  }\r\n\r\n  private createCell(col: number, row: number, value: string): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n\r\n  private initData(): void {\r\n    const dates = this.generateDates(this.startDate, this.endDate);\r\n\r\n    for (let i = 0; i < this.rowCount; i++) {\r\n      let row: Array<Cell> = new Array<Cell>();\r\n      for (let j = 0; j < this.columnCount; j++) {\r\n        let cell;\r\n        if (i === 0 && j > 0) {\r\n          cell = { row: i, col: j, value: dates[j] } as Cell;\r\n        } else {\r\n          cell = { row: i, col: j, value: \"\" } as Cell;\r\n        }\r\n        row.push(cell);\r\n      }\r\n      this.data.push(row);\r\n    }\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import { getData, Query } from \"./data-loader\";\r\nimport { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { SheetDataBuilder } from \"./data-builder\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\n\r\nexport class DataService {\r\n\r\n  async loadData(query?: Query) {\r\n    const result = await getData(query);\r\n\r\n    const users = new UserParser().parseArrayFromJson(result[0].data);\r\n    const issues = new IssueParser().parseArrayFromJson(result[1].data.issues);\r\n    const data = new SheetDataBuilder(users.length + 1, 100)\r\n      .addUsers(users)\r\n      .addIssues(issues)\r\n      .build();\r\n\r\n    return data;\r\n  }\r\n}\r\n","import React, { Dispatch } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchData } from '../actions';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport './JiraPlanningCalendar.css'\nimport JiraPlanningCalendarFilter from './filter/JiraPlanningCalendarFilter';\nimport { DataService } from '../data-service';\nimport { Query } from '../data-loader';\n\ninterface StateToProps {\n  data: any\n}\n\ninterface DispatchProps {\n  fetchData: (data) => void\n}\n\ntype Props = StateToProps & DispatchProps\nclass JiraPlanningCalendar extends React.Component<Props, {}> {\n  private dataService: DataService;\n\n  constructor(props: Props) {\n    super(props);\n    this.dataService = new DataService();\n  }\n\n  filterHandler = async (data) => {\n    const query: Query = {\n      userName: data.user,\n      issue: data.issue\n    }\n    \n    var result = await this.dataService.loadData(query);\n\n    this.props.fetchData(result);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <JiraPlanningCalendarFilter\n            filterHandler={this.filterHandler}\n          />\n        </div>\n        <div className=\"roster-container\">\n          <Spreadsheet data={this.props.data} />\n        </div>\n      </div>\n    )\n  }\n\n  componentWillMount() {\n    this.dataService.loadData().then(x => {\n      this.props.fetchData(x);\n    });\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data\n  } as StateToProps\n}\n\nconst mapDispatchProps = (dispatch: Dispatch<AnyAction>) => ({\n  fetchData: (data) => dispatch(fetchData(data))\n} as DispatchProps);\n\nexport default connect(mapStateToProps, mapDispatchProps)(JiraPlanningCalendar)\n","import { FETCH_DATA } from \"./action-types\";\r\n\r\nexport function fetchData(data) {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA } from \"./action-types\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nfunction sheetReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sheetReducer;\r\n","import { createStore } from 'redux';\r\nimport sheetReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(sheetReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Roster from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Roster />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
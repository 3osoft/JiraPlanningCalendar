{"version":3,"sources":["modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","jira.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/jira-planning-calendar/components/ReadOnlyDataViewer.tsx","modules/jira-planning-calendar/data-creator.ts","modules/shared/date-helper.ts","axios.ts","token.js","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/dom-element-helper.ts","modules/shared/components/LoadingComponent.tsx","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","data","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","name","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","Date","project","startDate","customfield_10015","dueDate","duedate","JIRA_BROWSE_URL","ListDataViewer","cell","row","col","id","JSON","stringify","droppableId","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","value","map","item","index","draggableId","draggableProps","isDragging","draggableStyle","display","userSelect","marginTop","marginBottom","dragHandleProps","width","height","label","marginLeft","marginRight","onClick","window","open","handleOpenIssue","cursor","placeholder","ReadOnlyDataViewer","onMouseDown","event","stopPropagation","onMouseOver","CalendarDataCreator","users","issues","endDate","dates","this","addDates","addUsers","addIssues","create","dateArray","currentDate","toLocaleDateString","setDate","getDate","getDateRange","length","createCell","issuesMap","Map","issue","startDateIndex","findIndex","x","dueDateIndex","dateCells","slice","userCell","find","dateCell","get","set","rowCount","columnCount","start","moment","end","Math","trunc","duration","diff","asDays","getNumberOfDays","i","j","emptyCell","addCell","dataViewer","uuid","DataViewer","axiosInstance","Axios","baseURL","interceptors","request","use","config","url","parent","token","DataService","defaultQuery","startOf","toDate","endOf","query","getData","parseArrayFromJson","calendarData","console","log","userUrl","issuesUrl","userName","issuesQuery","format","endsWith","Promise","all","fetchDataAction","dispatch","a","async","fetchDataRequested","dataService","loadData","fetchDataSuccess","fetchDataFailure","type","payload","error","JiraPlanningCalendarFilter","props","getFilterItemStyle","pos","flex","alignSelf","filterHandler","Form","onSubmit","formProps","submitting","dirty","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","defaultValue","fieldProps","valid","DatePicker","Textfield","Button","appearance","isDisabled","hideElements","elements","el","visibility","LoadingComponent","className","JiraPlanningCalendar","state","useSelector","useDispatch","useEffect","isLoading","document","querySelectorAll","body","addEventListener","getList","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","onDragEnd","sourRow","sourCol","sourData","destRow","destCol","destData","source","destination","cellPosition","parse","list","startIndex","endIndex","from","splice","removed","reorder","reorderAction","sourceCellPosition","destinationCellPosition","sourceRow","sourceCol","destinationRow","destinationCol","droppableSource","droppableDestination","sourceClone","destClone","move","whiteSpace","Boolean","location","hostname","match","initialState","errors","rootReducer","action","Object","assign","reorderResult","sourCell","destCell","moveResult","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21257519.chunk.js","sourcesContent":["import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project),\r\n      startDate: new Date(data.fields.customfield_10015),\r\n      dueDate: new Date(data.fields.duedate)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import React from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { JIRA_BROWSE_URL } from '../../../jira';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const id = JSON.stringify({ row, col });\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : 'white',\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleOpenIssue = (item) => {\r\n      window.open(`${JIRA_BROWSE_URL}${item}`, '_blank');\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={id}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item, index) => (\r\n                  <Draggable\r\n                     key={`${cell.id}-${item}`}\r\n                     draggableId={`${cell.id}-${item}`}\r\n                     index={index}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                           )}>\r\n                           <div {...provided.dragHandleProps} style={getListItemIconStyle()}>\r\n                              <DragHandlerIcon label='drag-handle' />\r\n                           </div>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open-icon' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import React from 'react';\r\n\r\nconst ReadOnlyDataViewer = ({ cell }) => {\r\n\r\n   return (\r\n      <div onMouseDown={event => event.stopPropagation()} onMouseOver={event => event.stopPropagation()} >\r\n         {cell.value}\r\n      </div>)\r\n}\r\n\r\nexport default ReadOnlyDataViewer;\r\n","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport ReadOnlyDataViewer from \"./components/ReadOnlyDataViewer\";\r\nimport { getNumberOfDays, getDateRange } from \"../shared/date-helper\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.addDates();\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(): void {\r\n    const dates = getDateRange(\r\n      new Date(this.startDate),\r\n      new Date(this.endDate)\r\n    );\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(\r\n        index + 1,\r\n        0,\r\n        dates[index],\r\n        ReadOnlyDataViewer\r\n      );\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    const issuesMap = new Map<string, Array<string>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n\r\n      const startDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.startDate.toLocaleDateString()\r\n      );\r\n\r\n      const dueDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.dueDate.toLocaleDateString()\r\n      );\r\n\r\n      const dateCells = this.dates.slice(startDateIndex, dueDateIndex);\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (!userCell) {\r\n        throw new Error(\r\n          \"No users were found. Without users, issues cannot be displayed\"\r\n        );\r\n      }\r\n\r\n      dateCells.forEach(dateCell => {\r\n        let col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issue.key);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n        this.issues.push(this.createCell(col, row, data, ListDataViewer));\r\n      });\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    const rowCount = this.users.length + 1;\r\n    const columnCount = getNumberOfDays(this.startDate, this.endDate) + 1;\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const emptyCell = this.createCell(j, i, [], ListDataViewer);\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n\r\n    // dates\r\n    this.dates.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // users\r\n    this.users.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // issues\r\n    this.issues.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n  }\r\n\r\n  private createCell(\r\n    col: number,\r\n    row: number,\r\n    value: any,\r\n    dataViewer?: any\r\n  ): Cell {\r\n    return {\r\n      id: uuid(),\r\n      col: col,\r\n      row: row,\r\n      value: value,\r\n      DataViewer: dataViewer\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n}\r\n","import moment from \"moment\";\r\n\r\nexport const  getDateRange = (startDate: Date, endDate: Date): Array<string> => {\r\n   var dateArray = new Array<string>();\r\n   var currentDate = startDate;\r\n\r\n   while (currentDate <= endDate) {\r\n     dateArray.push(new Date(currentDate).toLocaleDateString());\r\n     currentDate.setDate(currentDate.getDate() + 1);\r\n   }\r\n   return dateArray;\r\n }\r\n\r\n export const getNumberOfDays = (startDate: Date, endDate: Date): number => {\r\n   const start = moment(startDate.setDate(startDate.getDate() - 1));\r\n   const end = moment(endDate);\r\n   return Math.trunc(moment.duration(end.diff(start)).asDays());\r\n }","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { CalendarDataCreator } from \"./data-creator\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    const data = await this.getData(query);\r\n    const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n    const result = new CalendarDataCreator(users, issues, query.startDate, query.endDate).calendarData;\r\n    console.log(result)\r\n    // const result = [\r\n    //   [\r\n    //     {\r\n    //       row: 0,\r\n    //       col: 0,\r\n    //       value: [\"Raspberry\", \"Apple\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     },\r\n    //     {\r\n    //       row: 0,\r\n    //       col: 1,\r\n    //       value: [\"Paprika\", \"Onion\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     }\r\n    //   ],\r\n    //   [\r\n    //     {\r\n    //       row: 1,\r\n    //       col: 0,\r\n    //       value: [\"Cola\", \"Fanta\", \"Sprite\"],\r\n    //       DataViewer: ListDataViewer\r\n    //     }\r\n    //   ]\r\n    // ];\r\n    return result;\r\n  }\r\n\r\n  private getData(query?: Query) {\r\n    let userUrl = \"/users\";\r\n    let issuesUrl = \"/issues\";\r\n\r\n    if (query) {\r\n      if (query.userName) {\r\n        userUrl = `${userUrl}/${query.userName}`;\r\n      }\r\n\r\n      var issuesQuery = \"\";\r\n      if (query.issue) {\r\n        issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n      }\r\n\r\n      var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n      var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n      issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n      if (issuesQuery.endsWith(\"&\")) {\r\n        issuesQuery = issuesQuery.slice(0, -1);\r\n      }\r\n\r\n      issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n    }\r\n\r\n    return Promise.all([\r\n      axiosInstance.get(userUrl),\r\n      axiosInstance.get(issuesUrl)\r\n    ]);\r\n  }\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import { REORDER, MOVE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from \"./action-types\";\r\nimport { DataService, Query } from './data-service';\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch(error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure([error]))\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n}\r\n\r\nexport const fetchDataSuccess = (result) => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n}\r\n\r\nexport const fetchDataFailure = (error) => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n}\r\n\r\nexport const reorderAction = (row: number, col: number, data: Array<any>) => {\r\n  return {\r\n    type: REORDER,\r\n    payload: {\r\n      row,\r\n      col,\r\n      data\r\n    }    \r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  sourRow: number,\r\n  sourCol: number,\r\n  sourData: Array<any>,\r\n  destRow: number,\r\n  destCol: number,\r\n  destData: Array<any>\r\n) => {\r\n  return {\r\n    type: MOVE,\r\n    payload: {\r\n      sourRow,\r\n      sourCol,\r\n      sourData,\r\n      destRow,\r\n      destCol,\r\n      destData\r\n    }\r\n  };\r\n};\r\n","export const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between'\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","export const hideElements = (elements) => elements.forEach(el => {\r\n   el.style.visibility = 'hidden';\r\n });","import React from 'react';\r\nimport './LoadingComponents.css';\r\n\r\nconst LoadingComponent = () => {\r\n   return (\r\n      <div className='lds-roller'>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n         <div></div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default LoadingComponent;","import React, { useEffect } from 'react';\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { fetchDataAction, reorderAction, moveAction } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { Query } from '../data-service';\r\nimport LoadingComponent from '../../shared/components/LoadingComponent';\r\n\r\nconst JiraPlanningCalendar = () => {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const filterHandler = async (data) => {\r\n    const query: Query = {\r\n      userName: data.user,\r\n      issue: data.issue,\r\n      startDate: new Date(data.startDate),\r\n      endDate: new Date(data.endDate)\r\n    }\r\n\r\n    dispatch(fetchDataAction(query));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.isLoading) {\r\n      hideElements(document.querySelectorAll('.FloatingRect'));\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', () => {\r\n      hideElements(document.querySelectorAll('.ActiveCell'))\r\n\r\n    }, true);\r\n  }, [state.isLoading])\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      dispatch(fetchDataAction());\r\n    }\r\n    load();\r\n  }, []);\r\n\r\n  const reorder = (list: Array<any>, startIndex: number, endIndex: number) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n  }\r\n\r\n  const move = (source: Array<any>, destination: Array<any>, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n  }\r\n\r\n  const getList = (row: number, col: number) => {\r\n    return state.data[row][col].value;\r\n  }\r\n\r\n  const onDragEnd = (result: any) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const cellPosition = JSON.parse(source.droppableId);\r\n      const row = cellPosition.row;\r\n      const col = cellPosition.col;\r\n\r\n      const result = reorder(getList(row, col), source.index, destination.index);\r\n\r\n      dispatch(reorderAction(row, col, result));\r\n    } else {\r\n      const sourceCellPosition = JSON.parse(source.droppableId);\r\n      const destinationCellPosition = JSON.parse(destination.droppableId);\r\n      const sourceRow = sourceCellPosition.row;\r\n      const sourceCol = sourceCellPosition.col;\r\n      const destinationRow = destinationCellPosition.row;\r\n      const destinationCol = destinationCellPosition.col;\r\n\r\n      const result = move(getList(sourceRow, sourceCol), getList(destinationRow, destinationCol), source, destination);\r\n      dispatch(moveAction(sourceRow, sourceCol, result[source.droppableId], destinationRow, destinationCol, result[destination.droppableId]));\r\n    }\r\n  }\r\n\r\n  const getContainerStyle = () => ({\r\n    paddingTop: '1%',\r\n    paddingBottom: '1%',\r\n    paddingLeft: '1.5%',\r\n    paddingRight: '1.5%',\r\n    backgroundColor: 'white',\r\n  } as React.CSSProperties)\r\n\r\n  const getCalendarContainerStyle = () => ({\r\n    marginTop: '1%'\r\n  } as React.CSSProperties)\r\n\r\n  const getSpreadSheetStyle = () => ({\r\n    '.Spreadsheet td': {\r\n      whiteSpace: 'pre'\r\n    }\r\n  } as React.CSSProperties)\r\n\r\n  if (state.isLoading) {\r\n    return (\r\n      <LoadingComponent />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={getContainerStyle()}>\r\n      <div>\r\n        <JiraPlanningCalendarFilter\r\n          filterHandler={filterHandler}\r\n        />\r\n      </div>\r\n      <div style={getCalendarContainerStyle()}>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Spreadsheet style={getSpreadSheetStyle} data={state.data} />\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: [],\r\n  errors: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const cell: Cell = Object.assign({}, state.data[action.payload.row][action.payload.col]);\r\n      cell.value = action.payload.data;\r\n\r\n      const reorderResult: Array<Array<Cell>> = [...state.data];\r\n      reorderResult[action.payload.row][action.payload.col] = cell;\r\n\r\n      return {\r\n        isLoading: false,\r\n        data: reorderResult,\r\n        errors: []\r\n      } as State;\r\n    case MOVE:\r\n      const sourCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.sourRow][action.payload.sourCol]\r\n      );\r\n      sourCell.value = action.payload.sourData;\r\n      const destCell: Cell = Object.assign(\r\n        {},\r\n        state.data[action.payload.destRow][action.payload.destCol]\r\n      );\r\n      destCell.value = action.payload.destData;\r\n\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      moveResult[action.payload.sourRow][action.payload.sourCol] = sourCell;\r\n      moveResult[action.payload.destRow][action.payload.destCol] = destCell;\r\n\r\n      return {\r\n        isLoading: false,\r\n        data: moveResult,\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_REQUEST:\r\n      return {\r\n        isLoading: true,\r\n        data: [], \r\n        errors: []       \r\n      } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload]\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n      return {\r\n        isLoading: false,\r\n        data: [],\r\n        errors: [...action.payload]\r\n      } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
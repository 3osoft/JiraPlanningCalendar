{"version":3,"sources":["modules/jira-planning-calendar/action-types.ts","modules/user/user-parser.tsx","modules/jira-planning-calendar/data-builder.ts","axios.ts","token.js","modules/project/project-parser.ts","modules/issue/issue-parser.ts","modules/jira-planning-calendar/filter/JiraPlanningCalendarFilter.tsx","modules/jira-planning-calendar/JiraPlanningCalendar.tsx","modules/jira-planning-calendar/data-loader.ts","modules/jira-planning-calendar/actions.ts","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["FETCH_DATA","FILTER_DATA","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","data","result","Array","forEach","user","parsedUser","fromJson","push","SheetDataBuilder","startDate","Date","setDate","getDate","endDate","this","initData","users","index","length","cell","createCell","addCell","issues","issue","dateCell","find","x","value","created","toLocaleDateString","userCell","map","assignee","project","key","col","row","y","dates","generateDates","i","j","dateArray","currentDate","axiosInstance","Axios","create","baseURL","interceptors","request","use","config","url","window","parent","token","ProjectParser","name","element","IssueParser","userParser","projectParser","fields","creator","JiraPlanningCalendarFilter","Form","onSubmit","props","filterHandler","formProps","dirty","submitting","className","Field","label","defaultValue","fieldProps","error","valid","DatePicker","Textfield","Button","type","appearance","isDisabled","React","Component","JiraPlanningCalendar","filterData","userPromise","get","issuesPromise","Promise","all","getData","then","console","log","parseArrayFromJson","addUsers","addIssues","build","fetchData","err","connect","state","dispatch","Boolean","location","hostname","match","initialState","sheetReducer","action","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb3b2d4f.chunk.js","sourcesContent":["export const FETCH_DATA = \"FETCH_DATA\";\r\nexport const FILTER_DATA = \"FILTER_DATA\";\r\n","import { Parser } from \"../shared/parser\";\r\nimport { User } from \"./user\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Cell } from \"./cell\";\r\nimport { User } from \"../user/user\";\r\nimport { Issue } from \"../issue/Issue\";\r\n\r\nexport class SheetDataBuilder {\r\n  private data = new Array<Array<Cell>>();\r\n  private startDate = new Date(new Date().setDate(new Date().getDate() - 1));\r\n  private endDate = new Date(new Date().setDate(new Date().getDate() + 100));\r\n\r\n  constructor() {\r\n    this.initData();\r\n  }\r\n\r\n  addUsers(users: Array<User>): SheetDataBuilder {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.addCell(cell);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addIssues(issues: Array<Issue>): SheetDataBuilder {\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n      const dateCell = this.data[0].find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n      const userCell = this.data\r\n        .map(x => x[index])\r\n        .find(x => x.value === issue.assignee.displayName);\r\n      const project = issue.key;\r\n      if (dateCell && userCell) {\r\n        const cell = this.createCell(dateCell.col, userCell.row, project);\r\n        this.addCell(cell);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  build(): Array<Array<Cell>> {\r\n    return this.data;\r\n  }\r\n\r\n  private createCell(col: number, row: number, value: string): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    const x = cell.row;\r\n    const y = cell.col;\r\n    this.data[x][y] = cell;\r\n  }\r\n\r\n  private initData(): void {\r\n    const dates = this.generateDates(this.startDate, this.endDate);\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      let row: Array<Cell> = new Array<Cell>();\r\n      for (let j = 0; j < 100; j++) {\r\n        let cell;\r\n        if (i === 0 && j > 0) {\r\n          cell = { row: i, col: j, value: dates[j] } as Cell;\r\n        } else {\r\n          cell = { row: i, col: j, value: \"\" } as Cell;\r\n        }\r\n        row.push(cell);\r\n      }\r\n      this.data.push(row);\r\n    }\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { Parser } from \"../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"./../user/user-parser\";\r\nimport { ProjectParser } from \"./../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport './JiraPlanningCalendarFilter.css'\r\n\r\nclass JiraPlanningCalendarFilter extends React.Component<{ filterHandler: (data) => void }, {}> {\r\n\r\n   render() {\r\n      return (\r\n         <Form onSubmit={data => this.props.filterHandler(data)}>\r\n            {({ formProps, dirty, submitting }) => (\r\n               <form {...formProps}>\r\n                  <div className=\"filter-container\">\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Start date\" name=\"end-date\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"End date\" name=\"start-date\" defaultValue={new Date().toLocaleDateString()} >\r\n                           {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"User\" name=\"user\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"filter-item\">\r\n                        <Field label=\"Issue\" name=\"issue\" defaultValue=\"\" >\r\n                           {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                        </Field>\r\n                     </div>\r\n\r\n                     <div className=\"submit-button\">\r\n                        <Button\r\n                           type=\"submit\"\r\n                           appearance=\"primary\"\r\n                           isDisabled={!dirty || submitting}>\r\n                           Submit\r\n                        </Button>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            )}\r\n         </Form>\r\n      )\r\n   }\r\n}\r\n\r\nexport default JiraPlanningCalendarFilter;\r\n","import React, { Dispatch } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchData, filterData } from './actions';\nimport { UserParser } from '../user/user-parser';\nimport { SheetDataBuilder } from './data-builder';\nimport { getData } from './data-loader';\nimport { IssueParser } from '../issue/issue-parser';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport './JiraPlanningCalendar.css'\nimport JiraPlanningCalendarFilter from './filter/JiraPlanningCalendarFilter';\n\ninterface StateToProps {\n  data: any\n}\n\ninterface DispatchProps {\n  fetchData: (data) => void,\n  filterData: (data) => void\n}\n\ntype Props = StateToProps & DispatchProps\nclass JiraPlanningCalendar extends React.Component<Props, {}> {\n\n  filterHandler = (data) => {\n    this.props.filterData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <JiraPlanningCalendarFilter\n            filterHandler={this.filterHandler}\n          />\n        </div>\n        <div className=\"roster-container\">\n          <Spreadsheet data={this.props.data} />\n        </div>\n      </div>\n\n    )\n  }\n\n  componentWillMount() {\n    getData().then(x => {\n      console.log(x);\n      const users = new UserParser().parseArrayFromJson(x[0].data);\n      const issues = new IssueParser().parseArrayFromJson(x[1].data.issues);\n\n      console.log(users);\n      console.log(issues);\n\n      const data = new SheetDataBuilder()\n        .addUsers(users)\n        .addIssues(issues)\n        .build();\n\n      this.props.fetchData(data);\n    }, err => {\n      console.log(err);\n    });\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data\n  } as StateToProps\n}\n\nconst mapDispatchProps = (dispatch: Dispatch<AnyAction>) => ({\n  fetchData: (data) => dispatch(fetchData(data)),\n  filterData: (data) => dispatch(filterData(data))\n} as DispatchProps);\n\nexport default connect(mapStateToProps, mapDispatchProps)(JiraPlanningCalendar)\n","import { axiosInstance } from \"../../axios\";\r\n\r\nexport function getData() {\r\n  var userPromise = axiosInstance.get(\"/users\");\r\n  var issuesPromise = axiosInstance.get(\"/issues\");\r\n\r\n  return Promise.all([userPromise, issuesPromise]);\r\n}\r\n","import { FETCH_DATA, FILTER_DATA } from \"./action-types\";\r\n\r\nexport function fetchData(data) {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n}\r\n\r\nexport function filterData(data) {\r\n  return {\r\n    type: FILTER_DATA,\r\n    data\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA, FILTER_DATA } from \"./action-types\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nfunction sheetReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    case FILTER_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sheetReducer;\r\n","import { createStore } from 'redux';\r\nimport sheetReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(sheetReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Roster from './modules/jira-planning-calendar/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Roster />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/components/filter/JiraPlanningCalendarFilter.tsx","axios.ts","modules/jira-planning-calendar/data-loader.ts","token.js","modules/jira-planning-calendar/domain/user/user-parser.tsx","modules/jira-planning-calendar/domain/project/project-parser.ts","modules/jira-planning-calendar/domain/issue/issue-parser.ts","modules/jira-planning-calendar/data-builder.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","store.js","index.js"],"names":["FETCH_DATA","fetchData","data","type","JiraPlanningCalendarFilter","props","filterHandler","Form","onSubmit","formProps","submitting","dirty","className","Field","label","name","defaultValue","moment","startOf","format","fieldProps","error","valid","DatePicker","endOf","Textfield","Button","appearance","isDisabled","axiosInstance","Axios","create","baseURL","getData","query","userUrl","issuesUrl","userName","issuesQuery","issue","startDate","endDate","endsWith","slice","Promise","all","get","interceptors","request","use","config","url","window","parent","token","UserParser","json","accountType","accountId","displayName","isActive","active","object","Error","result","Array","forEach","user","parsedUser","fromJson","push","ProjectParser","key","element","IssueParser","userParser","projectParser","assignee","fields","creator","created","Date","project","SheetDataBuilder","rowCount","columnCount","this","prepare","initData","users","index","length","cell","createCell","addCell","issues","userCells","map","x","dateCell","find","value","toLocaleDateString","userCell","newValue","col","row","existingCell","start","setDate","getDate","end","Math","trunc","duration","diff","asDays","dates","generateDates","i","j","dateArray","currentDate","DataService","defaultQuery","toDate","parseArrayFromJson","addUsers","addIssues","build","JiraPlanningCalendar","dataService","useSelector","state","dispatch","useDispatch","loadData","a","async","filterData","useEffect","load","Boolean","location","hostname","match","initialState","sheetReducer","action","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAAaA,EAAa,aCEnB,SAASC,EAAUC,GACxB,MAAO,CACLC,KAAMH,EACNE,Q,4FCkDWE,EA9CiE,SAACC,GAC9E,IAAMC,EAAgBD,EAAMC,cAC5B,OACY,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAAAN,GAAI,OAAII,EAAcJ,MAClC,gBAAGO,EAAH,EAAGA,UAAkBC,GAArB,EAAcC,MAAd,EAAqBD,YAArB,OACE,yBAAUD,EACP,yBAAKG,UAAU,oBACZ,yBAAKA,UAAU,eACZ,kBAACC,EAAA,EAAD,CAAOC,MAAM,aAAaC,KAAK,YAAYC,aAAcC,MAASC,QAAQ,WAAWC,OAAO,gBACxF,gBAAGC,EAAH,EAAGA,WAAH,EAAeC,MAAf,EAAsBC,MAAtB,OAAkC,kBAACC,EAAA,EAAeH,OAIzD,yBAAKR,UAAU,eACZ,kBAACC,EAAA,EAAD,CAAOC,MAAM,WAAWC,KAAK,UAAUC,aAAcC,MAASO,MAAM,WAAWL,OAAO,gBAClF,gBAAGC,EAAH,EAAGA,WAAH,EAAeC,MAAf,EAAsBC,MAAtB,OAAkC,kBAACC,EAAA,EAAeH,OAIzD,yBAAKR,UAAU,eACZ,kBAACC,EAAA,EAAD,CAAOC,MAAM,OAAOC,KAAK,OAAOC,aAAa,KACzC,gBAAGI,EAAH,EAAGA,WAAH,EAAeC,MAAf,EAAsBC,MAAtB,OAAkC,kBAACG,EAAA,EAAcL,OAIxD,yBAAKR,UAAU,eACZ,kBAACC,EAAA,EAAD,CAAOC,MAAM,QAAQC,KAAK,QAAQC,aAAa,KAC3C,gBAAGI,EAAH,EAAGA,WAAH,EAAeC,MAAf,EAAsBC,MAAtB,OAAkC,kBAACG,EAAA,EAAcL,OAIxD,yBAAKR,UAAU,iBACZ,kBAACc,EAAA,EAAD,CACGvB,KAAK,SACLwB,WAAW,UACXC,WAAYlB,GAHf,iB,yBCtCvB,IAAMmB,E,OAAgBC,EAAMC,OAAO,CACxCC,QAAS,0BCDJ,SAASC,EAAQC,GACtB,IAAIC,EAAU,SACVC,EAAY,UAEhB,GAAIF,EAAO,CACLA,EAAMG,WACRF,EAAO,UAAMA,EAAN,YAAiBD,EAAMG,WAGhC,IAAIC,EAAc,GACdJ,EAAMK,QACRD,EAAW,UAAMA,EAAN,mBAA4BJ,EAAMK,MAAlC,MAGb,IAAIC,EAAYvB,IAAOiB,EAAMM,WAAWrB,OAAO,cAC/CmB,EAAW,UAAMA,EAAN,oBAA6BE,EAA7B,KAEX,IAAIC,EAAUxB,IAAOiB,EAAMO,SAAStB,OAAO,eAC3CmB,EAAW,UAAMA,EAAN,oBAA6BG,EAA7B,MAEKC,SAAS,OACvBJ,EAAcA,EAAYK,MAAM,GAAI,IAGtCP,EAAS,UAAMA,EAAN,YAAmBE,GAG9B,OAAOM,QAAQC,IAAI,CACjBhB,EAAciB,IAAIX,GAClBN,EAAciB,IAAIV,KDzBtBP,EAAckB,aAAaC,QAAQC,KAAI,SAAAC,GAErC,OADAA,EAAOC,IAAMD,EAAOC,IAAM,QEPjBC,OAAOC,OAAOD,OAAOE,MFQvBJ,KGNF,IAAMK,EAAb,iGAEaC,GACL,MAAO,CACHC,YAAaD,EAAKC,YAClBC,UAAWF,EAAKE,UAChBC,YAAaH,EAAKG,YAClBC,SAAUJ,EAAKK,UAP3B,6BAWWC,GACH,MAAM,IAAIC,MAAM,6BAZxB,yCAeuB7D,GAAyB,IAAD,OACjC8D,EAAS,IAAIC,MAOnB,OANA/D,EAAKgE,SAAQ,SAAAC,GACT,IAAIC,EAAa,EAAKC,SAASF,GAC3BC,EAAWR,UAAuC,cAA3BQ,EAAWX,aAClCO,EAAOM,KAAKF,MAGbJ,IAvBf,uCAyBqB9D,GACb,MAAM,IAAI6D,MAAM,+BA1BxB,KCAaQ,EAAb,iGACWf,GACP,MAAO,CACLgB,IAAKhB,EAAKgB,IACVzD,KAAMyC,EAAKzC,QAJjB,6BAQS+C,GACL,MAAM,IAAIC,MAAM,6BATpB,yCAYqB7D,GAA4B,IAAD,OACtC8D,EAAS,IAAIC,MAInB,OAHA/D,EAAKgE,SAAQ,SAAAO,GACXT,EAAOM,KAAK,EAAKD,SAASI,OAErBT,IAjBX,uCAmBmB9D,GACf,MAAM,IAAI6D,MAAM,+BApBpB,KCEaW,EAAb,iGACWxE,GACP,IAAMyE,EAAa,IAAIpB,EACjBqB,EAAgB,IAAIL,EAE1B,MAAO,CACLC,IAAKtE,EAAKsE,IACVK,SAAUF,EAAWN,SAASnE,EAAK4E,OAAOD,UAC1CE,QAASJ,EAAWN,SAASnE,EAAK4E,OAAOC,SACzCC,QAAS,IAAIC,KAAK/E,EAAK4E,OAAOE,SAC9BE,QAASN,EAAcP,SAASnE,EAAK4E,OAAOI,YAVlD,6BAcShF,GACL,MAAM,IAAI6D,MAAM,6BAfpB,yCAkBqB7D,GAA0B,IAAD,OACpC8D,EAAS,IAAIC,MAInB,OAHA/D,EAAKgE,SAAQ,SAAAO,GACXT,EAAOM,KAAK,EAAKD,SAASI,OAErBT,IAvBX,uCA0BmB9D,GACf,MAAM,IAAI6D,MAAM,+BA3BpB,KCAaoB,EAAb,WAOE,WAAYC,EAAkB5C,EAAiBC,GAAgB,yBANvD2C,cAMsD,OALtDC,YAAsB,EAKgC,KAJtDnF,KAAO,IAAI+D,MAI2C,KAHtDzB,eAGsD,OAFtDC,aAEsD,EAC5D6C,KAAK9C,UAAYA,EACjB8C,KAAK7C,QAAUA,EACf6C,KAAKF,SAAWA,EAChBE,KAAKC,UACLD,KAAKE,WAZT,qDAeWC,GACP,IAAK,IAAIC,EAAQ,EAAGA,EAAQD,EAAME,OAAQD,IAAS,CACjD,IAAME,EAAON,KAAKO,WAAW,EAAGH,EAAQ,EAAGD,EAAMC,GAAO/B,aACxD2B,KAAKQ,QAAQF,GAEf,OAAON,OApBX,gCAuBYS,GAGR,IAHiD,IAAD,OAC1CC,EAAYV,KAAKpF,KAAK+F,KAAI,SAAAC,GAAC,OAAIA,EAAE,MADS,WAGvCR,GACP,IAAMnD,EAAQwD,EAAOL,GACfS,EAAW,EAAKjG,KAAK,GAAGkG,MAC5B,SAAAF,GAAC,OAAIA,EAAEG,QAAU9D,EAAMyC,QAAQsB,wBAG3BC,EAAWP,EAAUI,MACzB,SAAAF,GAAC,OAAIA,EAAEG,QAAU9D,EAAMsC,SAASlB,eAGlC,GAAIwC,GAAYI,EAAU,CACxB,IAIIC,EAJEC,EAAMN,EAASM,IACfC,EAAMH,EAASG,IACfC,EAAe,EAAKzG,KAAKwG,GAAKD,GAIlCD,EADEG,EAAaN,MACP,UAAMM,EAAaN,MAAnB,aAA6B9D,EAAMiC,KAEhCjC,EAAMiC,IAGnB,IAAMoB,EAAO,EAAKC,WAAWY,EAAKC,EAAKF,GACvC,EAAKV,QAAQF,KAvBRF,EAAQ,EAAGA,EAAQK,EAAOJ,OAAQD,IAAU,EAA5CA,GA0BT,OAAOJ,OApDX,8BAwDI,OAAOA,KAAKpF,OAxDhB,iCA2DqBuG,EAAaC,EAAaL,GAC3C,MAAO,CACLI,IAAKA,EACLC,IAAKA,EACLL,MAAOA,KA/Db,8BAmEkBT,GACdN,KAAKpF,KAAK0F,EAAKc,KAAKd,EAAKa,KAAOb,IApEpC,gCAwEI,IAAIgB,EAAQ3F,IAAOqE,KAAK9C,UAAUqE,QAAQvB,KAAK9C,UAAUsE,UAAY,IACjEC,EAAM9F,IAAOqE,KAAK7C,SACtB6C,KAAKD,YAAc2B,KAAKC,MAAMhG,IAAOiG,SAASH,EAAII,KAAKP,IAAQQ,UAAY,IA1E/E,iCAgFI,IAFA,IAAMC,EAAQ/B,KAAKgC,cAAchC,KAAK9C,UAAW8C,KAAK7C,SAE7C8E,EAAI,EAAGA,EAAIjC,KAAKF,SAAUmC,IAAK,CAEtC,IADA,IAAIb,EAAmB,IAAIzC,MAClBuD,EAAI,EAAGA,EAAIlC,KAAKD,YAAamC,IAAK,CACzC,IAAI5B,OAAI,EAENA,EADQ,IAAN2B,GAAWC,EAAI,EACV,CAAEd,IAAKa,EAAGd,IAAKe,EAAGnB,MAAOgB,EAAMG,IAE/B,CAAEd,IAAKa,EAAGd,IAAKe,EAAGnB,MAAO,IAElCK,EAAIpC,KAAKsB,GAEXN,KAAKpF,KAAKoE,KAAKoC,MA3FrB,oCA+FwBlE,EAAiBC,GAIrC,IAHA,IAAIgF,EAAY,IAAIxD,MAChByD,EAAclF,EAEXkF,GAAejF,GACpBgF,EAAUnD,KAAK,IAAIW,KAAKyC,GAAapB,sBACrCoB,EAAYb,QAAQa,EAAYZ,UAAY,GAE9C,OAAOW,MAvGX,KCCaE,EAAb,iDACUC,aAAe,CACrBpF,UAAWvB,MAASC,QAAQ,WAAW2G,SACvCpF,QAASxB,MAASO,MAAM,WAAWqG,UAHvC,gKAMiB3F,EANjB,+BAMgCoD,KAAKsC,aANrC,4BASqB3F,EAAQC,IAT7B,OASM8B,EATN,uDAWMA,EAAS,KAXf,eAcUyB,EAAQzB,GAAS,IAAIT,GAAauE,mBAAmB9D,EAAO,GAAG9D,MAAQ,GACvE6F,EAAS/B,GAAS,IAAIU,GAAcoD,mBAAmB9D,EAAO,GAAG9D,KAAK6F,QAAU,GAEhFvD,EAAYN,EAAMM,UAClBC,EAAUP,EAAMO,QAChB2C,EAAWK,EAAME,OAAS,EAC1BzF,EAAO,IAAIiF,EAAiBC,EAAU5C,EAAWC,GACpDsF,SAAStC,GACTuC,UAAUjC,GACVkC,QAvBP,kBAyBW/H,GAzBX,iECkDegI,EA/Cc,WAC3B,IAAMC,EAAc,IAAIR,EAClBzH,EAAOkI,aAAY,SAAAC,GAAK,OAAIA,EAAMnI,QAClCoI,EAAWC,cAcXC,EAAW,oBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACFN,EAAYK,YADV,8EAIXG,EAAa,SAAOzG,GAAP,SAAAuG,EAAAC,OAAA,kEAAAD,EAAA,MACJN,EAAYK,SAAStG,IADjB,8EAYnB,OARA0G,qBAAU,YACR,mBAAAH,EAAAC,OAAA,kEAAAD,EAAA,MACuBD,KADvB,OACQxE,EADR,OAEEsE,EAASrI,EAAU+D,IAFrB,qCAIA6E,KACC,IAGD,yBAAKjI,UAAU,aACb,6BACE,kBAAC,EAAD,CACEN,cAhCc,SAAOJ,GAAP,iBAAAuI,EAAAC,OAAA,uDACdxG,EAAe,CACnBG,SAAUnC,EAAKiE,KACf5B,MAAOrC,EAAKqC,MACZC,UAAW,IAAIyC,KAAK/E,EAAKsC,WACzBC,QAAS,IAAIwC,KAAK/E,EAAKuC,UALL,WAAAgG,EAAA,MAQCE,EAAWzG,IARZ,OAQd8B,EARc,OASpBsE,EAASrI,EAAU+D,IATC,yCAmClB,yBAAKpD,UAAU,oBACb,kBAAC,IAAD,CAAaV,KAAMA,OCtCP4I,QACW,cAA7B1F,OAAO2F,SAASC,UAEe,UAA7B5F,OAAO2F,SAASC,UAEhB5F,OAAO2F,SAASC,SAASC,MACvB,2D,qBChBAC,EAAe,CACnBhJ,KAAM,IAeOiJ,MAZf,WAAqD,IAA/Bd,EAA8B,uDAAtBa,EAAcE,EAAQ,uCAClD,OAAQA,EAAOjJ,MACb,KAAKH,EAIH,MAHa,CACXE,KAAK,YAAKkJ,EAAOlJ,OAGrB,QACE,OAAOmI,ICXEgB,cAAYF,GCK3BG,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,OAEJC,SAASC,eAAe,SHuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f241482.chunk.js","sourcesContent":["export const FETCH_DATA = \"FETCH_DATA\";\r\n","import { FETCH_DATA } from \"./action-types\";\r\n\r\nexport function fetchData(data) {\r\n  return {\r\n    type: FETCH_DATA,\r\n    data\r\n  };\r\n}\r\n","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport './JiraPlanningCalendarFilter.css'\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter: React.FC<{ filterHandler: (data) => void }> = (props) => {\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n               <Form onSubmit={data => filterHandler(data)}>\r\n                  {({ formProps, dirty, submitting }) => (\r\n                     <form {...formProps}>\r\n                        <div className=\"filter-container\">\r\n                           <div className=\"filter-item\">\r\n                              <Field label=\"Start date\" name=\"startDate\" defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                                 {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                              </Field>\r\n                           </div>\r\n      \r\n                           <div className=\"filter-item\">\r\n                              <Field label=\"End date\" name=\"endDate\" defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                                 {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                              </Field>\r\n                           </div>\r\n      \r\n                           <div className=\"filter-item\">\r\n                              <Field label=\"User\" name=\"user\" defaultValue=\"\" >\r\n                                 {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                              </Field>\r\n                           </div>\r\n      \r\n                           <div className=\"filter-item\">\r\n                              <Field label=\"Issue\" name=\"issue\" defaultValue=\"\" >\r\n                                 {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                              </Field>\r\n                           </div>\r\n      \r\n                           <div className=\"submit-button\">\r\n                              <Button\r\n                                 type=\"submit\"\r\n                                 appearance=\"primary\"\r\n                                 isDisabled={submitting}>\r\n                                 Search\r\n                              </Button>\r\n                           </div>\r\n                        </div>\r\n                     </form>\r\n                  )}\r\n               </Form>\r\n            )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","import Axios from \"axios\";\r\nimport { getToken } from \"./token\";\r\n\r\nexport const axiosInstance = Axios.create({\r\n  baseURL: \"http://localhost:3001\"\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  config.url = config.url + \"?jwt=\" + getToken();\r\n  return config;\r\n});\r\n","import { axiosInstance } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\nexport function getData(query?: Query) {\r\n  let userUrl = \"/users\";\r\n  let issuesUrl = \"/issues\";\r\n\r\n  if (query) {\r\n    if (query.userName) {\r\n      userUrl = `${userUrl}/${query.userName}`;\r\n    }\r\n\r\n    var issuesQuery = \"\";\r\n    if (query.issue) {\r\n      issuesQuery = `${issuesQuery}project=${query.issue}&`;\r\n    }\r\n\r\n    var startDate = moment(query.startDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created>=${startDate}&`;\r\n\r\n    var endDate = moment(query.endDate).format(\"YYYY-MM-DD\");\r\n    issuesQuery = `${issuesQuery}created<=${endDate}&`;\r\n\r\n    if (issuesQuery.endsWith(\"&\")) {\r\n      issuesQuery = issuesQuery.slice(0, -1);\r\n    }\r\n\r\n    issuesUrl = `${issuesUrl}/${issuesQuery}`;\r\n  }\r\n\r\n  return Promise.all([\r\n    axiosInstance.get(userUrl),\r\n    axiosInstance.get(issuesUrl)\r\n  ]);\r\n}\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","export function getToken() {\r\n    return window.parent.window.token;\r\n}","import { User } from \"./user\";\r\nimport { Parser } from \"../../../shared/parser\";\r\n\r\nexport class UserParser implements Parser<User> {\r\n\r\n    fromJson(json: any): User {\r\n        return {\r\n            accountType: json.accountType,\r\n            accountId: json.accountId,\r\n            displayName: json.displayName,\r\n            isActive: json.active\r\n        };\r\n    }\r\n\r\n    toJson(object: User) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    parseArrayFromJson(data: any): Array<User> {\r\n        const result = new Array<User>();\r\n        data.forEach(user => {\r\n            var parsedUser = this.fromJson(user);\r\n            if (parsedUser.isActive && parsedUser.accountType === 'atlassian') {\r\n                result.push(parsedUser);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    parseArrayToJson(data: User[]) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Parser } from \"../../../shared/parser\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class ProjectParser implements Parser<Project> {\r\n  fromJson(json: any): Project {\r\n    return {\r\n      key: json.key,\r\n      name: json.name\r\n    };\r\n  }\r\n\r\n  toJson(object: Project) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Project> {\r\n    const result = new Array<Project>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n  parseArrayToJson(data: Project[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Parser } from \"../../../shared/parser\";\r\nimport { Issue } from \"./Issue\";\r\nimport { UserParser } from \"../user/user-parser\";\r\nimport { ProjectParser } from \"../project/project-parser\";\r\n\r\nexport class IssueParser implements Parser<Issue> {\r\n  fromJson(data: any): Issue {\r\n    const userParser = new UserParser();\r\n    const projectParser = new ProjectParser();\r\n\r\n    return {\r\n      key: data.key,\r\n      assignee: userParser.fromJson(data.fields.assignee),\r\n      creator: userParser.fromJson(data.fields.creator),\r\n      created: new Date(data.fields.created),\r\n      project: projectParser.fromJson(data.fields.project)\r\n    } as Issue;\r\n  }\r\n\r\n  toJson(data: Issue) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  parseArrayFromJson(data: any): Array<Issue> {\r\n    const result = new Array<Issue>();\r\n    data.forEach(element => {\r\n      result.push(this.fromJson(element));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  parseArrayToJson(data: Issue[]) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n","import { Cell } from \"./domain/cell/cell\";\r\nimport { Issue } from \"./domain/issue/Issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport moment from 'moment';\r\n\r\nexport class SheetDataBuilder {\r\n  private rowCount: number;\r\n  private columnCount: number = 0;\r\n  private data = new Array<Array<Cell>>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  constructor(rowCount: number, startDate: Date, endDate: Date) {\r\n    this.startDate = startDate\r\n    this.endDate = endDate\r\n    this.rowCount = rowCount;\r\n    this.prepare();\r\n    this.initData();\r\n  }\r\n\r\n  addUsers(users: Array<User>): SheetDataBuilder {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(0, index + 1, users[index].displayName);\r\n      this.addCell(cell);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addIssues(issues: Array<Issue>): SheetDataBuilder {\r\n    const userCells = this.data.map(x => x[0]);\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n      const dateCell = this.data[0].find(\r\n        x => x.value === issue.created.toLocaleDateString()\r\n      );\r\n\r\n      const userCell = userCells.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (dateCell && userCell) {\r\n        const col = dateCell.col;\r\n        const row = userCell.row;\r\n        const existingCell = this.data[row][col];\r\n\r\n        let newValue;\r\n        if (existingCell.value) {\r\n          newValue = `${existingCell.value}\\n${issue.key}`;\r\n        } else {\r\n          newValue = issue.key;\r\n        }\r\n\r\n        const cell = this.createCell(col, row, newValue);\r\n        this.addCell(cell);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  build(): Array<Array<Cell>> {\r\n    return this.data;\r\n  }\r\n\r\n  private createCell(col: number, row: number, value: string): Cell {\r\n    return {\r\n      col: col,\r\n      row: row,\r\n      value: value\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n\r\n  private prepare(): void {\r\n    var start = moment(this.startDate.setDate(this.startDate.getDate() - 1));\r\n    var end = moment(this.endDate);\r\n    this.columnCount = Math.trunc(moment.duration(end.diff(start)).asDays()) + 1;\r\n  }\r\n\r\n  private initData(): void {\r\n    const dates = this.generateDates(this.startDate, this.endDate);\r\n\r\n    for (let i = 0; i < this.rowCount; i++) {\r\n      let row: Array<Cell> = new Array<Cell>();\r\n      for (let j = 0; j < this.columnCount; j++) {\r\n        let cell;\r\n        if (i === 0 && j > 0) {\r\n          cell = { row: i, col: j, value: dates[j] } as Cell;\r\n        } else {\r\n          cell = { row: i, col: j, value: \"\" } as Cell;\r\n        }\r\n        row.push(cell);\r\n      }\r\n      this.data.push(row);\r\n    }\r\n  }\r\n\r\n  private generateDates(startDate: Date, endDate: Date) {\r\n    var dateArray = new Array<string>();\r\n    var currentDate = startDate;\r\n\r\n    while (currentDate <= endDate) {\r\n      dateArray.push(new Date(currentDate).toLocaleDateString());\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n  }\r\n}\r\n","import { getData, Query } from \"./data-loader\";\r\nimport { IssueParser } from \"./domain/issue/issue-parser\";\r\nimport { SheetDataBuilder } from \"./data-builder\";\r\nimport { UserParser } from \"./domain/user/user-parser\";\r\nimport moment from 'moment';\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment().startOf('isoWeek').toDate(),\r\n    endDate: moment().endOf('isoWeek').toDate()\r\n  }\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    let result;\r\n    try {\r\n      result = await getData(query)\r\n    } catch(e) {\r\n      result = null;\r\n    }\r\n    \r\n    const users = result ? new UserParser().parseArrayFromJson(result[0].data) : [];\r\n    const issues = result ? new IssueParser().parseArrayFromJson(result[1].data.issues) : [];\r\n\r\n    const startDate = query.startDate;\r\n    const endDate = query.endDate;\r\n    const rowCount = users.length + 1;\r\n    const data = new SheetDataBuilder(rowCount, startDate, endDate)\r\n      .addUsers(users)\r\n      .addIssues(issues)\r\n      .build();\r\n\r\n    return data;\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\nimport Spreadsheet from \"react-spreadsheet\";\nimport { fetchData } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './JiraPlanningCalendar.css'\nimport JiraPlanningCalendarFilter from './filter/JiraPlanningCalendarFilter';\nimport { DataService } from '../data-service';\nimport { Query } from '../data-loader';\n\nconst JiraPlanningCalendar = () => {\n  const dataService = new DataService();\n  const data = useSelector(state => state.data);\n  const dispatch = useDispatch();\n\n  const filterHandler = async (data) => {\n    const query: Query = {\n      userName: data.user,\n      issue: data.issue,\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate)\n    }\n\n    const result = await filterData(query);\n    dispatch(fetchData(result));\n  }\n  \n  const loadData = async () => {\n    return await dataService.loadData();\n  }\n  \n  const filterData = async (query) => {\n    return await dataService.loadData(query);\n  }\n\n  useEffect(() => {\n    async function load() {\n      const result = await loadData();      \n      dispatch(fetchData(result));\n    }    \n    load();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div>\n        <JiraPlanningCalendarFilter\n          filterHandler={filterHandler}\n        />\n      </div>\n      <div className=\"roster-container\">\n        <Spreadsheet data={data} />\n      </div>\n    </div>\n  )\n}\n\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA } from \"./action-types\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nfunction sheetReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      var result = {\r\n        data: [...action.data]\r\n      };\r\n      return result;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sheetReducer;\r\n","import { createStore } from 'redux';\r\nimport sheetReducer from './modules/jira-planning-calendar/reducers';\r\n\r\nexport default createStore(sheetReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Roster from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Roster />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
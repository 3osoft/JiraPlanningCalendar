{"version":3,"sources":["modules/jira-planning-calendar/model/cell/cell-type.ts","modules/jira-planning-calendar/components/ListDataViewer.tsx","modules/shared/date-helper.ts","modules/jira-planning-calendar/domain/issue/issue-part.ts","modules/jira-planning-calendar/data-creator.ts","jira.ts","modules/jira-planning-calendar/domain/issue/issue.ts","modules/jira-planning-calendar/data-service.ts","modules/jira-planning-calendar/actions.ts","modules/jira-planning-calendar/action-types.ts","modules/jira-planning-calendar/components/JiraPlanningCalendarFilter.tsx","modules/shared/dom-element-helper.ts","modules/jira-planning-calendar/components/JiraPlanningCalendar.tsx","serviceWorker.js","modules/jira-planning-calendar/reducers.ts","index.js"],"names":["CellType","ListDataViewer","cellType","cell","row","col","droppableId","JSON","stringify","isDraggable","DRAGGABLE","DRAG_AND_DROP","isDropDisabled","DROPPABLE","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","value","map","item","index","key","id","draggableId","isDragDisabled","draggableProps","dragHandleProps","isDragging","draggableStyle","display","userSelect","marginTop","marginBottom","randomColor","marginLeft","marginRight","issue","onClick","issueUrl","url","console","log","window","open","width","height","cursor","label","placeholder","getDateRange","startDate","endDate","dateArray","Array","currentDate","Date","push","toLocaleDateString","setDate","getDate","IssuePart","actualPart","totalParts","this","uuid","CalendarDataCreator","users","issues","data","dates","addDates","addUsers","addIssues","create","length","createCell","READONLY","displayName","issuesMap","Map","issueParts","dueDate","date","all","startDateIndex","findIndex","x","dueDateIndex","dateCells","slice","userCell","find","assignee","Error","forEach","dateCell","idx","get","set","moment","isSame","isToday","isAfter","isFuture","rowCount","columnCount","start","end","Math","trunc","duration","diff","asDays","getNumberOfDays","i","j","emptyCell","addCell","dataViewer","DataViewer","JIRA_BROWSE_URL","Issue","project","creator","created","DataService","defaultQuery","startOf","toDate","endOf","testData","accountId","accountType","isActive","name","issue1","issue2","calendarData","fetchDataAction","query","dispatch","a","async","fetchDataRequested","dataService","loadData","result","fetchDataSuccess","fetchDataFailure","type","payload","error","reorder","pos","move","sourCells","destCells","JiraPlanningCalendarFilter","props","getFilterItemStyle","flex","alignSelf","filterHandler","Form","onSubmit","formProps","submitting","dirty","flexDirection","flexWrap","justifyContent","alignItems","alignContent","Field","defaultValue","format","fieldProps","valid","DatePicker","Textfield","Button","appearance","isDisabled","hideElements","elements","el","visibility","JiraPlanningCalendar","state","useSelector","useDispatch","useEffect","isLoading","document","querySelectorAll","body","addEventListener","handleDragAndDrop","source","destination","cellPos","parse","positon","sourIndex","destIndex","getState","splice","removed","sourCellPos","destCellPos","issuePart","sourPos","destPos","draggable","moveResult","startIndex","endIndex","parts","newCell","Object","assign","filter","moveAction","className","userName","user","active","spinner","color","styles","overlay","base","onDragEnd","Boolean","location","hostname","match","initialState","errors","rootReducer","action","reorderResult","cells","concat","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7edeaad.chunk.js","sourcesContent":["export enum CellType {\r\n   READONLY, DROPPABLE, DRAGGABLE, DRAG_AND_DROP\r\n}","import React from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport OpenIcon from '@atlaskit/icon/glyph/open';\r\nimport { IssuePart } from './../domain/issue/issue-part';\r\nimport { CellType } from '../model/cell/cell-type';\r\nimport { randomcolor as randomColor } from 'randomcolor';\r\n\r\nconst ListDataViewer = ({ cell }) => {\r\n   const row = cell.row;\r\n   const col = cell.col;\r\n   const droppableId = JSON.stringify({ row, col });\r\n\r\n   const getListItemStyle = (isDragging, draggableStyle) => ({\r\n      display: 'flex',\r\n      userSelect: 'none',\r\n      padding: '3px',\r\n      marginTop: '2px',\r\n      marginBottom: '2px',\r\n      background: isDragging ? 'lightgreen' : randomColor(),\r\n\r\n      ...draggableStyle\r\n   } as React.CSSProperties);\r\n\r\n   const getListStyle = isDraggingOver => ({\r\n      background: isDraggingOver ? 'lightblue' : 'white',\r\n      padding: '8px',\r\n   } as React.CSSProperties);\r\n\r\n   const getListItemOpenIconStyle = () => ({\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n   } as React.CSSProperties)\r\n\r\n   const getListItemTextStyle = () => ({\r\n      marginLeft: '5px',\r\n      marginRight: '10px'\r\n\r\n   } as React.CSSProperties)\r\n\r\n   const handleOpenIssue = (issueUrl: string) => {\r\n      console.log(issueUrl)\r\n      window.open(issueUrl, '_blank');\r\n   }\r\n\r\n   const isDraggable = (cellType: CellType): boolean => {\r\n      return cellType === CellType.DRAGGABLE || cellType === CellType.DRAG_AND_DROP;\r\n   }\r\n\r\n   const isDroppable = (cellType: CellType): boolean => {\r\n      return cellType === CellType.DROPPABLE || cellType === CellType.DRAG_AND_DROP;\r\n   }\r\n\r\n   return (\r\n      <Droppable droppableId={droppableId} isDropDisabled={!isDroppable(cell.cellType)}>\r\n         {(provided, snapshot) => (\r\n            <div\r\n               ref={provided.innerRef}\r\n               style={getListStyle(snapshot.isDraggingOver)}>\r\n               {cell.value.map((item: IssuePart, index: number) => (\r\n                  <Draggable\r\n                     key={item.id}\r\n                     draggableId={item.id}\r\n                     index={index}\r\n                     isDragDisabled={!isDraggable(cell.cellType)}>\r\n                     {(provided, snapshot) => (\r\n                        <div\r\n                           ref={provided.innerRef}\r\n                           {...provided.draggableProps}\r\n                           {...provided.dragHandleProps}\r\n\r\n                           style={getListItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                           )}>\r\n\r\n                           <div style={getListItemTextStyle()}>\r\n                              {item.issue.key}\r\n                           </div>\r\n\r\n                           <div onClick={() => handleOpenIssue(item.issue.url)} style={getListItemOpenIconStyle()}>\r\n                              <OpenIcon label='open' />\r\n                           </div>\r\n                        </div>\r\n                     )}\r\n                  </Draggable>\r\n               ))}\r\n               {provided.placeholder}\r\n            </div>\r\n         )}\r\n      </Droppable>\r\n   )\r\n}\r\n\r\nexport default ListDataViewer;","import moment from \"moment\";\r\n\r\nexport const  getDateRange = (startDate: Date, endDate: Date): Array<string> => {\r\n   var dateArray = new Array<string>();\r\n   var currentDate = new Date(startDate);\r\n\r\n   while (currentDate <= endDate) {\r\n     dateArray.push(new Date(currentDate).toLocaleDateString());\r\n     currentDate.setDate(currentDate.getDate() + 1);\r\n   }\r\n   return dateArray;\r\n }\r\n\r\n export const getNumberOfDays = (startDate: Date, endDate: Date): number => {\r\n   const start = moment(startDate.setDate(startDate.getDate() - 1));\r\n   const end = moment(endDate);\r\n   return Math.trunc(moment.duration(end.diff(start)).asDays());\r\n }\r\n\r\n export const isToday = (date: Date): boolean => {\r\n  return moment(date).isSame(moment(), 'day');\r\n }\r\n\r\n export const isFuture = (date: Date): boolean => {\r\n  return moment(date).isAfter(moment(), 'day');\r\n }","import { Issue } from \"./issue\";\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport class IssuePart {\r\n   id: string;\r\n   issue: Issue;\r\n   actualPart: number;\r\n   totalParts: number;\r\n\r\n   get isStart(): boolean {\r\n      return this.actualPart === 0;\r\n   }\r\n\r\n   get isEnd(): boolean {\r\n      return this.actualPart === this.totalParts - 1;\r\n   }\r\n\r\n   get isSinglePart(): boolean {\r\n      return this.totalParts === 1;\r\n   }\r\n\r\n   constructor(issue: Issue, actualPart: number, totalParts: number) {\r\n      this.id = uuid();\r\n      this.issue = issue;\r\n      this.actualPart = actualPart;\r\n      this.totalParts = totalParts;      \r\n   }\r\n   \r\n}","import { Cell } from \"./model/cell/cell\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport ListDataViewer from \"./components/ListDataViewer\";\r\nimport {\r\n  getNumberOfDays,\r\n  getDateRange,\r\n  isToday,\r\n  isFuture\r\n} from \"../shared/date-helper\";\r\nimport { IssuePart } from \"./domain/issue/issue-part\";\r\nimport { CellType } from \"./model/cell/cell-type\";\r\n\r\nexport class CalendarDataCreator {\r\n  private data = new Array<Array<Cell>>();\r\n  private users = new Array<Cell>();\r\n  private issues = new Array<Cell>();\r\n  private dates = new Array<Cell>();\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n\r\n  get calendarData() {\r\n    return this.data;\r\n  }\r\n\r\n  constructor(\r\n    users: Array<User>,\r\n    issues: Array<Issue>,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) {\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.addDates();\r\n    this.addUsers(users);\r\n    this.addIssues(issues);\r\n    this.create();\r\n  }\r\n\r\n  private addDates(): void {\r\n    const dates = getDateRange(\r\n      new Date(this.startDate),\r\n      new Date(this.endDate)\r\n    );\r\n\r\n    for (let index = 0; index < dates.length; index++) {\r\n      const cell = this.createCell(0, index + 1, dates[index], CellType.READONLY);\r\n      this.dates.push(cell);\r\n    }\r\n  }\r\n\r\n  private addUsers(users: Array<User>): void {\r\n    for (let index = 0; index < users.length; index++) {\r\n      const cell = this.createCell(\r\n        index + 1,\r\n        0,\r\n        users[index].displayName,\r\n        CellType.READONLY\r\n      );\r\n      this.users.push(cell);\r\n    }\r\n  }\r\n\r\n  private addIssues(issues: Array<Issue>): void {\r\n    const issuesMap = new Map<string, Array<IssuePart>>();\r\n\r\n    for (let index = 0; index < issues.length; index++) {\r\n      const issue = issues[index];\r\n\r\n      const issueParts = getDateRange(issue.startDate, issue.dueDate).map(\r\n        (date, index, all) => {\r\n          return new IssuePart(issue, index, all.length);\r\n        }\r\n      );\r\n\r\n      const startDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.startDate.toLocaleDateString()\r\n      );\r\n\r\n      let dueDateIndex = this.dates.findIndex(\r\n        x => x.value === issue.dueDate.toLocaleDateString()\r\n      );\r\n\r\n      if (dueDateIndex !== -1) {\r\n        dueDateIndex = dueDateIndex + 1;\r\n      }\r\n\r\n      const dateCells = this.dates.slice(startDateIndex, dueDateIndex);\r\n\r\n      const userCell = this.users.find(\r\n        x => x.value === issue.assignee.displayName\r\n      );\r\n\r\n      if (!userCell) {\r\n        throw new Error(\r\n          \"No users were found. Without users, issues cannot be displayed\"\r\n        );\r\n      }\r\n\r\n      dateCells.forEach((dateCell, idx) => {\r\n        let col = dateCell.col;\r\n        const row = userCell.row;\r\n\r\n        let data = issuesMap.get(JSON.stringify({ row, col }));\r\n\r\n        if (!data) {\r\n          data = [];\r\n        }\r\n\r\n        data.push(issueParts[idx]);\r\n        issuesMap.set(JSON.stringify({ row, col }), data);\r\n\r\n        let cellType: CellType;\r\n\r\n        const date = dateCell.value;\r\n\r\n        if (isToday(date)) {\r\n          cellType = CellType.DRAG_AND_DROP;\r\n        } else if (isFuture(date)) {\r\n          cellType = CellType.DRAGGABLE;\r\n        } else {\r\n          cellType = CellType.READONLY;\r\n        }\r\n\r\n        this.issues.push(\r\n          this.createCell(row, col, data, cellType, ListDataViewer)\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  private create(): void {\r\n    const rowCount = this.users.length + 1;\r\n    const columnCount = getNumberOfDays(this.startDate, this.endDate) + 1;\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      this.data[i] = [];\r\n      for (let j = 0; j < columnCount; j++) {\r\n        const emptyCell = this.createCell(\r\n          i,\r\n          j,\r\n          [],\r\n          CellType.READONLY,\r\n          ListDataViewer\r\n        );\r\n        this.addCell(emptyCell);\r\n      }\r\n    }\r\n\r\n    // dates\r\n    this.dates.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // users\r\n    this.users.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n\r\n    // issues\r\n    this.issues.forEach(x => {\r\n      this.addCell(x);\r\n    });\r\n  }\r\n\r\n  private createCell(\r\n    row: number,\r\n    col: number,\r\n    value: any,\r\n    cellType: CellType,\r\n    dataViewer?: any,\r\n  ): Cell {\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      value: value,\r\n      DataViewer: dataViewer,\r\n      cellType: cellType\r\n    };\r\n  }\r\n\r\n  private addCell(cell: Cell): void {\r\n    this.data[cell.row][cell.col] = cell;\r\n  }\r\n}\r\n","export const JIRA_BASE_URL = 'https://bkjira.atlassian.net';\r\nexport const JIRA_BROWSE_URL = `${JIRA_BASE_URL}/browse/`","import { Project } from \"../project/project\";\r\nimport { User } from \"../user/user\";\r\nimport { JIRA_BROWSE_URL } from \"../../../../jira\";\r\n\r\nexport class Issue {\r\n  key: string;\r\n  project: Project;\r\n  assignee: User;\r\n  creator: User;\r\n  created: Date;\r\n  startDate: Date;\r\n  dueDate: Date;\r\n  url: string;\r\n\r\n  constructor(key: string, project: Project, assignee: User, creator: User, created: Date, startDate: Date, dueDate: Date) {\r\n    this.key = key;\r\n    this.project = project;\r\n    this.assignee = assignee;\r\n    this.creator = creator;\r\n    this.created = created;\r\n    this.startDate = startDate;\r\n    this.dueDate = dueDate;\r\n    this.url = `${JIRA_BROWSE_URL}${key}`;\r\n  }\r\n}\r\n","import { CalendarDataCreator } from \"./data-creator\";\r\nimport moment from \"moment\";\r\nimport { Issue } from \"./domain/issue/issue\";\r\nimport { User } from \"./domain/user/user\";\r\nimport { Project } from \"./domain/project/project\";\r\n\r\nexport class DataService {\r\n  private defaultQuery = {\r\n    startDate: moment()\r\n      .startOf(\"isoWeek\")\r\n      .toDate(),\r\n    endDate: moment()\r\n      .endOf(\"isoWeek\")\r\n      .toDate()\r\n  };\r\n\r\n  async loadData(query: Query = this.defaultQuery) {\r\n    // const data = await this.getData(query);\r\n    // const users = new UserParser().parseArrayFromJson(data[0].data);\r\n    // const issues = new IssueParser().parseArrayFromJson(data[1].data.issues);\r\n    // return new CalendarDataCreator(users, issues, query.startDate, query.endDate)\r\n\r\n    return testData();\r\n  }\r\n}\r\n\r\nconst testData = () => {\r\n  const users = [\r\n    {\r\n      displayName: \"Adam Blasko\",\r\n      accountId: \"0\",\r\n      accountType: \"atlassian\",\r\n      isActive: true\r\n    } as User,\r\n    {\r\n      displayName: \"Ben Kusicky\",\r\n      accountId: \"1\",\r\n      accountType: \"atlassian\",\r\n      isActive: true\r\n    } as User\r\n  ];\r\n\r\n  const project = {\r\n    key: \"JPC\",\r\n    name: \"Jira planning calendar\"\r\n  } as Project;\r\n\r\n  const issue1 = new Issue(\r\n    \"XAM-5147\",\r\n    project,\r\n    users[0],\r\n    users[0],\r\n    new Date(),\r\n    new Date(new Date().setDate(new Date().getDate() - 1)),\r\n    new Date(new Date().setDate(new Date().getDate() + 2))\r\n  );\r\n  const issue2 = new Issue(\r\n    \"XAM-5777\",\r\n    project,\r\n    users[1],\r\n    users[1],\r\n    new Date(),\r\n    new Date(),\r\n    new Date(new Date().setDate(new Date().getDate() + 1))\r\n  );\r\n\r\n  const startDate = moment()\r\n    .startOf(\"isoWeek\")\r\n    .toDate();\r\n  const endDate = moment()\r\n    .endOf(\"isoWeek\")\r\n    .toDate();\r\n\r\n  const result = new CalendarDataCreator(\r\n    users,\r\n    [issue1, issue2],\r\n    startDate,\r\n    endDate\r\n  ).calendarData;\r\n  return result;\r\n};\r\n\r\nexport interface Query {\r\n  userName?: string;\r\n  issue?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { DataService, Query } from \"./data-service\";\r\nimport { Position } from \"../shared/position\";\r\nimport { IssuePart } from \"./domain/issue/issue-part\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nexport const fetchDataAction = (query?: Query) => {\r\n  return async dispatch => {\r\n    dispatch(fetchDataRequested());\r\n\r\n    try {\r\n      const dataService = new DataService();\r\n      const result = await dataService.loadData(query);\r\n      dispatch(fetchDataSuccess(result));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(fetchDataFailure([error]));\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchDataRequested = () => {\r\n  return {\r\n    type: FETCH_DATA_REQUEST\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = result => {\r\n  return {\r\n    type: FETCH_DATA_SUCCESS,\r\n    payload: result\r\n  };\r\n};\r\n\r\nconst fetchDataFailure = error => {\r\n  return {\r\n    type: FETCH_DATA_FAILURE,\r\n    payload: error\r\n  };\r\n};\r\n\r\nexport const reorderAction = (\r\n  pos: Position,\r\n  sourIndex: number,\r\n  destIndex: number\r\n) => {\r\n  return (dispatch, getState) => {\r\n    const state: State = getState();\r\n\r\n    const data = [...state.data];\r\n    const cell: Cell = data[pos.row][pos.col];\r\n    const [removed] = cell.value.splice(sourIndex, 1);\r\n\r\n    cell.value.splice(destIndex, 0, removed);\r\n\r\n    dispatch(reorder(pos, cell));\r\n  };\r\n};\r\n\r\nconst reorder = (pos: Position, cell: Cell) => {\r\n  return {\r\n    type: REORDER,\r\n    payload: {\r\n      pos,\r\n      cell\r\n    }\r\n  };\r\n};\r\n\r\nexport const moveAction = (\r\n  draggable: IssuePart,\r\n  sourPos: Position,\r\n  destPos: Position\r\n) => {\r\n  return (dispatch, getState) => {\r\n    const state: State = getState();\r\n    const moveResult = [...state.data];\r\n\r\n    const startIndex = sourPos.col;\r\n    const endIndex = startIndex + draggable.totalParts - draggable.actualPart;\r\n\r\n    const parts = moveResult[sourPos.row]\r\n      .slice(startIndex, endIndex)\r\n      .map((cell: Cell) => {\r\n        return cell.value.find(\r\n          (issuePart: IssuePart) => issuePart.issue.key === draggable.issue.key\r\n        );\r\n      });\r\n\r\n    const sourCells: Array<Cell> = moveResult[sourPos.row].slice(\r\n      sourPos.col,\r\n      sourPos.col + parts.length\r\n    );\r\n    sourCells.forEach((cell: Cell, index) => {\r\n      const newCell: Cell = Object.assign({}, cell);\r\n      newCell.value = cell.value.filter(\r\n        (issuePart: IssuePart) => issuePart.issue.key !== draggable.issue.key\r\n      );\r\n      sourCells[index] = newCell;\r\n    });\r\n\r\n    const destCells: Array<Cell> = moveResult[destPos.row].slice(\r\n      destPos.col,\r\n      destPos.col + parts.length\r\n    );\r\n    destCells.forEach((cell: Cell) => {\r\n      const newCell: Cell = Object.assign({}, cell);\r\n      const item = parts.splice(0, 1)[0];\r\n      newCell.value.push(item);\r\n    });\r\n\r\n    dispatch(move(sourCells, destCells))\r\n  };\r\n};\r\n\r\nconst move = (sourCells: Array<Cell>, destCells: Array<Cell>) => {\r\n  return {\r\n    type: MOVE,\r\n    payload: {\r\n      sourCells,\r\n      destCells\r\n    }\r\n  };\r\n};\r\n","export const REORDER = 'REORDER';\r\nexport const MOVE = 'MOVE';\r\nexport const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';","import Form from '@atlaskit/form';\r\nimport Button from '@atlaskit/button';\r\nimport React from 'react';\r\nimport { DatePicker } from '@atlaskit/datetime-picker';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport { Field } from '@atlaskit/form';\r\nimport moment from 'moment';\r\n\r\nconst JiraPlanningCalendarFilter = (props) => {\r\n   const getContainerStyle = () => ({\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      flexWrap: 'nowrap',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'space-between',\r\n   } as React.CSSProperties)\r\n\r\n   const getFilterItemStyle = (pos: number) => (\r\n      {\r\n      width: '25%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'auto',\r\n      marginLeft: pos === 0 ? '0' : '1%'\r\n   } as React.CSSProperties)\r\n\r\n   const getButtonStyle = () => ({\r\n      width: '10%',\r\n      flex: '0 1 auto',\r\n      alignSelf: 'center',\r\n      marginLeft: '1%',\r\n      marginTop: '30px'\r\n   } as React.CSSProperties)\r\n\r\n   const filterHandler = props.filterHandler;\r\n   return (\r\n      <Form onSubmit={data => filterHandler(data)}>\r\n         {({ formProps, dirty, submitting }) => (\r\n            <form {...formProps}>\r\n               <div style={getContainerStyle()}>\r\n                  <div style={getFilterItemStyle(0)}>\r\n                     <Field label='Start date' name='startDate' defaultValue={moment().startOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(1)}>\r\n                     <Field label='End date' name='endDate' defaultValue={moment().endOf('isoWeek').format('YYYY-MM-DD')} >\r\n                        {({ fieldProps, error, valid }) => <DatePicker {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(2)}>\r\n                     <Field label='User' name='user' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getFilterItemStyle(3)}>\r\n                     <Field label='Issue' name='issue' defaultValue='' >\r\n                        {({ fieldProps, error, valid }) => <Textfield {...fieldProps} />}\r\n                     </Field>\r\n                  </div>\r\n\r\n                  <div style={getButtonStyle()}>\r\n                     <Button\r\n                        type='submit'\r\n                        appearance='primary'\r\n                        isDisabled={submitting}>\r\n                        Search\r\n                     </Button>\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         )}\r\n      </Form>\r\n   )\r\n};\r\n\r\nexport default JiraPlanningCalendarFilter;","export const hideElements = (elements) => elements.forEach(el => {\r\n   el.style.visibility = 'hidden';\r\n });","import React, { useEffect } from 'react';\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { fetchDataAction, reorderAction, moveAction } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport JiraPlanningCalendarFilter from './JiraPlanningCalendarFilter';\r\nimport { DragDropContext, DropResult, DraggableLocation } from 'react-beautiful-dnd';\r\nimport { hideElements } from '../../shared/dom-element-helper';\r\nimport { Query } from '../data-service';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport BounceLoader from 'react-spinners/BounceLoader'\r\nimport { State } from './../state';\r\nimport { Position } from '../../shared/position';\r\nimport './JiraPlanningCalendar.css';\r\n\r\nconst JiraPlanningCalendar = () => {\r\n  const state = useSelector((state: State) => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const filterHandler = async (data) => {\r\n    const query: Query = {\r\n      userName: data.user,\r\n      issue: data.issue,\r\n      startDate: new Date(data.startDate),\r\n      endDate: new Date(data.endDate)\r\n    }\r\n\r\n    dispatch(fetchDataAction(query));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.isLoading) {\r\n      hideElements(document.querySelectorAll('.FloatingRect'));\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', () => {\r\n      hideElements(document.querySelectorAll('.ActiveCell'))\r\n\r\n    }, true);\r\n  }, [state.isLoading])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDataAction());\r\n  }, []);\r\n\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    handleDragAndDrop(source, destination);\r\n  }\r\n\r\n  const handleDragAndDrop = (source: DraggableLocation , destination: DraggableLocation ) => {\r\n    if (source.droppableId === destination.droppableId) {\r\n      const cellPos = JSON.parse(source.droppableId);\r\n      const positon = {\r\n        row: cellPos.row,\r\n        col: cellPos.col\r\n      } as Position;\r\n\r\n      dispatch(\r\n        reorderAction(positon, source.index, destination.index)\r\n      );\r\n    } else {\r\n      const sourCellPos = JSON.parse(source.droppableId);\r\n      const destCellPos = JSON.parse(destination.droppableId);\r\n\r\n      const issuePart = state.data[sourCellPos.row][sourCellPos.col].value[source.index];\r\n\r\n      const sourPos = {\r\n        row: sourCellPos.row, \r\n        col: sourCellPos.col\r\n      } as Position;\r\n\r\n      const destPos = {\r\n        row: destCellPos.row,\r\n        col: destCellPos.col\r\n      } as Position;\r\n\r\n      dispatch(\r\n        moveAction(issuePart, sourPos, destPos)\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div>\r\n        <JiraPlanningCalendarFilter\r\n          filterHandler={filterHandler}\r\n        />\r\n      </div>\r\n      <LoadingOverlay\r\n        active={state.isLoading}\r\n        spinner={<BounceLoader color='#0052CC' />}\r\n        styles={{\r\n          overlay: (base: any) => ({\r\n            ...base,\r\n            background: '#D9FFFFFF'\r\n          }),\r\n        }}>\r\n        <div className='calendar'>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <Spreadsheet data={state.data} />\r\n          </DragDropContext>\r\n        </div>\r\n      </LoadingOverlay>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JiraPlanningCalendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  REORDER,\r\n  MOVE,\r\n  FETCH_DATA_REQUEST,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_FAILURE\r\n} from \"./action-types\";\r\nimport { Cell } from \"./model/cell/cell\";\r\nimport { State } from \"./state\";\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  data: [],\r\n  errors: []\r\n};\r\n\r\nconst rootReducer = (state: State = initialState, action) => {\r\n  switch (action.type) {\r\n    case REORDER:\r\n      const row = action.payload.pos.row;\r\n      const col = action.payload.pos.col;\r\n      const reorderResult = [...state.data];\r\n      reorderResult[row][col] = Object.assign({}, action.payload.cell);\r\n      return {\r\n        isLoading: false,\r\n        data: reorderResult,\r\n        errors: []\r\n      } as State;\r\n    case MOVE:\r\n      const moveResult: Array<Array<Cell>> = [...state.data];\r\n      const cells: Array<Cell> = action.payload.sourCells.concat(\r\n        action.payload.destCells\r\n      );\r\n\r\n      cells.forEach((cell: Cell) => {\r\n        moveResult[cell.row][cell.col] = Object.assign({}, cell);\r\n      });\r\n      return {\r\n        isLoading: false,\r\n        data: moveResult,\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_REQUEST:\r\n      return {\r\n        isLoading: true,\r\n        data: [...state.data],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        data: [...action.payload],\r\n        errors: []\r\n      } as State;\r\n    case FETCH_DATA_FAILURE:\r\n      return {\r\n        isLoading: false,\r\n        data: [],\r\n        errors: [...action.payload]\r\n      } as State;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JiraPlanningCalendar from './modules/jira-planning-calendar/components/JiraPlanningCalendar';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules/jira-planning-calendar/reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <JiraPlanningCalendar />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}